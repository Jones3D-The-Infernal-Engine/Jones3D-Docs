{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Work in progress!</p> <p>This is an unofficial and incomplete documentation about the game file structure and modding. For any information not found here, please look into Discussions and post any question there.</p> <p>Before you start with modding it's a good idea to extract all the game's resource files. Please follow the instructions in pre-mod.md for this.</p>"},{"location":"#game-assets","title":"Game Assets","text":"<p>The game assets are usually stored in <code>.gob</code> container files. GOB files can be extracted using gobext tool.</p> <p>The resource folder structure:</p> <pre><code>Root\n\u2502\n\u251c\u2500\u2500 3do        # 3D models (.3do)\n\u2502   \u2514\u2500\u2500 key    # Animations (.key)\n\u251c\u2500\u2500 cog        # COG scripts (.cog)\n\u251c\u2500\u2500 mat        # Material texture files\n\u251c\u2500\u2500 misc\n\u2502   \u251c\u2500\u2500 ai     # AI behavior definition files (.ai)\n\u2502   \u251c\u2500\u2500 pup    # Character movement puppet files (.pup)\n\u2502   \u251c\u2500\u2500 snd    # Sound definition files (.snd)\n\u2502   \u251c\u2500\u2500 spr    # Sprite definition files (.spr)\n\u2502   \u2514\u2500\u2500 ui     # Contains only unused default font.gcf font atlas file\n\u251c\u2500\u2500 ndy        # Level files (.cnd/.ndy)\n\u2514\u2500\u2500 sound      # Sound files (.wav)\n</code></pre> <ul> <li> <p> COG script</p> <p>COG scripts are the heart of game logic. They define the mechanics behind the game, like cutscenes, level goals, unlocking/locking doors, weapon definitions, etc.</p> </li> <li> <p> KEY</p> <p>KEY file (short for Keyframe file) defines various animations of the mesh joint nodes of associated 3DO model. To edit KEY animations use Sith addon for Blender.</p> </li> <li> <p> PUP</p> <p>Puppet file (<code>.pup</code>) defines object movement animations.</p> </li> </ul>"},{"location":"#game-level-files","title":"Game level files","text":"<p>There are 2 types of level files:</p> <ul> <li><code>NDY</code> - text based level format which can be edited in any text editor.</li> <li> <p><code>CND</code> - is compact binary level format. The file has a structure similar as NDY file and stores both the level structure and game assets.</p> <p>Note</p> <p>The C++ code for CND file structure can be found in: https://github.com/smlu/ProjectMarduk/tree/develop/libraries/libim/content/asset/world/impl/serialization/cnd</p> </li> </ul>"},{"location":"#file-naming-convention","title":"File Naming Convention","text":"<p>Maximum length limit</p> <p>The maximum file name length, including the file extension in Jones3D engine, is limited to 64 characters. Therefore, longer file names must be abbreviated.  </p>"},{"location":"#common-abbreviations","title":"Common Abbreviations","text":"Abbreviation Meaning Abbreviation Meaning <code>dflt</code> Default <code>mo</code> Monkey <code>bk</code> Back <code>ol</code> Old Lady <code>by</code> Boy <code>rft</code> Raft <code>com</code> Commie <code>sn</code> Snake <code>fr</code> Front <code>sp</code> Spider <code>ib</code> Ice Boss <code>so</code> Sophia <code>ij</code> Indy Jeep <code>tu</code> Turner <code>in</code> Indy <code>uw</code> Under Water <code>inv</code> Inventory <code>vo</code> Volodnikov <code>ir</code> Indy Raft <code>yl</code> Young Lady <code>lb</code> Lava Boss <code>mc</code> Mine Car <p>Note</p> <p>Additionally, every file referring to a specific game level is prefixed with three letters of the abbreviated level name (e.g., <code>pyr_</code>, <code>pru_</code>...).</p>"},{"location":"cog/","title":"COG Script","text":"<p>COG script is a script language used in the game to define game logic. Scripts are written in files with a <code>.cog</code> extension, which are loaded and compiled to bytecode by the game engine. The resulting bytecode is then executed by the engine. COG scripts can be attached to game objects (such as Things, Actors, etc.) in the template section or set as part of the level COG system.</p>"},{"location":"cog/#file-structure","title":"File Structure","text":"<p>The script file is divided into 3 sections: flags, symbols and code, each of which is ended with the <code>end</code> keyword. The flags section is optional and can be omitted. Info on all available flags can be found in flags.md#cog-flags. The <code>symbols</code> section defines the script variables and the <code>code</code> section defines script code.</p> <p>Example: <pre><code>flags 0x40 # optional\nsymbols\n  message startup\n  message entered\n\n  int a = 1  \n  material mat = material.mat local\n  surface surf\n  sector surfSector nolink local\n  thing player local\nend\n\ncode\n  startup:\n    player = GetLocalPlayerThing();\n    sector = GetSurfaceSector(surf);\n    return;\n\n  entered:\n    # If player stepped on the surface, damage him\n    if (GetSenderRef() == surf)\n    {\n      DamageThing(player, 100, 0x01, -1); # 0x01 is impact damage type\n    }\n    return;\nend\n</code></pre></p>"},{"location":"cog/#symbols-section","title":"Symbols Section","text":"<p>The <code>symbols</code> section defines the script variables. Each variable is defined on a separate line. The variable type is defined by the first keyword, followed by the variable name, optional initialization value, and symbol attributes. </p> <pre><code>&lt;type&gt; &lt;name&gt; = &lt;value&gt; &lt;attributes&gt;\n</code></pre>"},{"location":"cog/#cog-symbol-type","title":"COG Symbol Type","text":"<p>The variable type can be one of the following:</p> Type Value Description <code>ai</code> <code>.ai</code> filename AI class <code>cog</code> Index in COG list Level COG <code>flex</code> Integer or float Decimal number or script function <code>float</code> Float Decimal number <code>int</code> Int Integer number <code>keyframe</code> <code>.KEY</code> filename Keyframe animation <code>material</code> <code>.MAT</code> filename Texture material <code>message</code> None Special symbol type that defines an event message. The name must be one of the 48 predefined messages. See COG Messages. <code>model</code> <code>.3DO</code> filename 3D model <code>sector</code> Index in sector list Level sector <code>sound</code> <code>.WAV</code> filename Sound file <code>sprite</code> <code>.SPR</code> filename Sprite file <code>surface</code> Index in surface list Level surface <code>vector</code> <code>(x/y/z)</code> Vector type <code>template</code> Template name Game object template <code>thing</code> Index in the thing list Game object <p>Note</p> <p>All index values (e.g. for COG, sector, surface, thing) are usually defined by the level where COG script is used.</p>"},{"location":"cog/#cog-symbol-reference-type","title":"COG Symbol Reference Type","text":"<p>Internal value of each symbol type is defined as fixed number. This number is retrieved in the script code for example by calling <code>GetSenderType</code> or <code>GetSourceType</code>. The following table defines the type values:</p> Type Value <code>COG_SYM_REF_NONE</code> 0 <code>COG_SYM_REF_INT</code> 1 <code>COG_SYM_REF_FLEX</code> 2 <code>COG_SYM_REF_THING</code> 3 <code>COG_SYM_REF_TEMPLATE</code> 4 <code>COG_SYM_REF_SECTOR</code> 5 <code>COG_SYM_REF_SURFACE</code> 6 <code>COG_SYM_REF_KEYFRAME</code> 7 <code>COG_SYM_REF_SOUND</code> 8 <code>COG_SYM_REF_COG</code> 9 <code>COG_SYM_REF_MATERIAL</code> 10 <code>COG_SYM_REF_VECTOR</code> 11 <code>COG_SYM_REF_MODEL</code> 12 <code>COG_SYM_REF_AICLASS</code> 13"},{"location":"cog/#cog-symbol-attributes","title":"COG Symbol Attributes","text":"<p>All attributes are optional and can be omitted when defining the variable. The attribute can't be set for the <code>message</code> type.</p> <p>The following attributes are available:</p> Attribute Symbol Type Description <code>desc</code> all The variable description. This attribute is used by level editor. <code>linkid</code> non-arithmetic The variable link ID refers to an identifier that can be assigned to variables. This ID can then be retrieved in the script code by calling the host function <code>GetSenderId</code>. The link ID is useful for grouping variables that would trigger the same code logic.For example, instead of checking if the sender is one of the surface: <code>if( GetSenderRef() == surf1 or GetSenderRef() == surf2 )</code> you could assign the same link ID, e.g.: 2 to those surfaces and refactor code to: <code>if ( GetSenderId() == 2 )</code> If link ID is not set the default value is 0. Setting link ID to less than 0 i.e. -1 will not link the symbol to script. The same <code>nolink</code> attribute. <code>local</code> all The variable is local to the script and it can't be initialized from the level file. <code>mask</code> non-arithmetic The mask defines which game object types (see Thing type) trigger the message event for the variable in the script. What that means is that when an object of the specified type interacts with the object that the variable references, a specific message will be sent to the script with the masked object as the source and the referenced object as the sender. For example, if a variable named <code>surf</code> has a mask set for the Player type, and a player activates the referenced object, the message <code>activated</code> will be sent to the script with the player as the source and the <code>surf</code> object as the sender. The mask value is hexadecimal number where each bit represents one game object type. To achieve this, each game type needs to be converted to a power of 2. For example, the player type mask would be represented as 0x400 = 2^10.By default, every variable is set with a mask of <code>0x401</code>, which corresponds to the Player &amp; Free object mask. The mask for the free object type is used when there is no source trigger object. <code>nolink</code> non-arithmetic The variable is not linked to the script, i.e. it won't trigger any event message in the script. <p>Note</p> <p>Non-arithmetic symbols are: <code>ai</code>, <code>cog</code>, <code>keyframe</code>, <code>material</code>, <code>model</code>, <code>sector</code>, <code>sound</code>, <code>sprite</code>, <code>surface</code>, <code>template</code>, <code>thing</code>.</p>"},{"location":"cog/#cog-messages","title":"COG Messages","text":"<p>COG message is the core of COG script logic, here the COG script code is written. Each COG message section begins with message name followed by colon (':') and ends with return statement e.g.: <code>return;</code>.</p> <p>e.g.:</p> <p><pre><code>somemessage:\n  ... message code ...\n  return;\n</code></pre> Each message is called with following parameters:</p> Param Type Retrieve Function Description <code>SenderType</code> Symbol Reference Type <code>GetSenderType</code> The type of the sender which sent the message <code>Sender</code> SymbolType <code>GetSenderRef</code> The sender which sent the messagee.g.: Sector, Surface, Actor, Player <code>SenderLinkId</code> <code>int</code> <code>GetSenderID</code> The link ID of the sender. (e.g.: set with <code>linkid</code> param at sender variable declaration) <code>SourceType</code> Symbol Reference Type <code>GetSourceType</code> The type of the source which initiate the sent message <code>Source</code> SymbolType <code>GetSourceRef</code> The source which initiate the sent messagee.g.: Player is source which step on the surface = sender which sent COG message <code>Param0</code> Any Type <code>GetParam(0)</code> Message extra parameter 0 <code>Param1</code> Any Type <code>GetParam(1)</code> Message extra parameter 1 <code>Param2</code> Any Type <code>GetParam(2)</code> Message extra parameter 2 <code>Param3</code> Any Type <code>GetParam(3)</code> Message extra parameter 3 <p>There are 48 predefined COG messages:</p> 1. <code>activate</code> 17. <code>activated</code> 33.<code>aievent</code>params:     <ul> <li><code>p0</code> = <code>aiEventType</code></li> <li><code>p1</code> = current AI mode</li> <li><code>p2</code> = depends on <code>aiEventType</code></li> </ul>     eg.: <code>aiEventType = 0x100</code> (<code>aiModeChanged</code>), <code>p1 = oldMode</code>, <code>p2 = newMode</code> 2. <code>aim</code> 18. <code>arrived</code> 34. <code>arrivedwpnt</code> 3. <code>blocked</code> 19. <code>boarded</code> 35. <code>created</code> 4. <code>changed</code> 20. <code>created</code> 36. <code>crossed</code> 5. <code>damaged</code> 21. <code>deactivated</code> 37. <code>deselected</code> 6. <code>entered</code> 22. <code>exited</code> 38. <code>fire</code> 7. <code>initialized</code> 23. <code>join</code> 39. <code>killed</code> 8. <code>leave</code> 24. <code>loading</code> 40. <code>missed</code> <ul> <li><code>sender</code>: projectile weapon</li> <li><code>src</code>: shooter</li> <li>params: <code>p0</code> = <code>damageValue</code> <code>p1</code> = <code>damageType</code></li> </ul> 9. <code>newplayer</code> 25. <code>pulse</code> 41. <code>removed</code> 10. <code>respawn</code> 26. <code>selected</code> 42. <code>shutdown</code> 11. <code>sighted</code> 27. <code>splash</code> (when entering/exiting water) 43. <code>startup</code> 12. <code>statechange</code> 28. <code>taken</code> 44. <code>timer</code> 13. <code>touched</code> 29. <code>trigger</code> 45. <code>unboarded</code> 14. <code>updatewpnts</code> 30. <code>user0</code> 46. <code>user1</code> 15. <code>user2</code> 31. <code>user3</code> (when cutscene ends) 47. <code>user4</code> 16. <code>user5</code> 32. <code>user6</code> 48. <code>user7</code>"},{"location":"cog/#message-damaged","title":"Message: damaged","text":"<p>Message is received when sender is damaged.</p> Param Value <code>senderType</code> <code>COG_SYM_REF_SECTOR</code> | <code>COG_SYM_REF_SURFACE</code> | <code>COG_SYM_REF_THING</code> <code>sender</code> Victim Thing object or damaged surface/sector <code>sourceType</code> <code>COG_SYM_REF_THING</code> <code>source</code> Source thing object that caused the damage <code>Param0</code> The amount of damage to be inflicted <code>Param1</code> The damage class type <code>Param2</code> - <code>Param3</code> <code>0</code> - not used <code>Return</code> (Optional) In case victim is thing object, the return value can be set to override the damage amount to be actually inflicted. In this case if return value is 0 or less, no damage is inflicted. <p>Note</p> <p>In some cases the sender and source thing objects can be the same object, e.g.: Object hitting floor surface or object from height, actor drowning, raft actor punctured leak damage, IM part damage, etc.</p>"},{"location":"cog/#message-callback","title":"Message: callback","text":"<p>Message is sent by game engine to Thing COG script when puppet submode keyframe plays specific frame with key marker.</p> Param Value <code>senderType</code> COG_SYM_REF_THING <code>sender</code> Thing object for which the played puppet submode keyframe produced this event message <code>sourceType</code> COG_SYM_REF_NONE <code>source</code> 0 <code>Param0</code> Played track slot num of puppet submode which produced this event message <code>Param1</code> Key marker type which produced this event message <code>Param2</code> - <code>Param3</code> <code>0</code> - not used <p>This event message is sent for these key marker types when actor is not in push/pull move state:</p> Code Action Notes <code>16</code> <code>Activate</code> Also sent when activate to board/disembark raft. <code>21</code> <code>PlaceRightArm</code> Also sent at the end of disembarking raft animation. <code>22</code> <code>PlaceRightArmRest</code> Also sent at the end of boarding raft animation. <code>23</code> <code>ReachRightArm</code> <code>24</code> <code>ReachRightArmRest</code> <code>25</code> <code>Pickup</code> <code>26</code> <code>Drop</code> <code>28</code> <code>InventoryPull</code> <code>29</code> <code>InventoryPut</code> <code>30</code> <code>AttackFinish</code> Also sent at the end of boarding/disembarking raft animation. <code>31</code> <code>TurnOff</code>"},{"location":"cog/#message-created","title":"Message: created","text":"<p>Message is sent by game engine to Thing COG script after Thing object was created.</p> Param Value <code>senderType</code> <code>COG_SYM_REF_THING</code> <code>sender</code> Thing for which the puppet submode is being played <code>sourceType</code> <code>COG_SYM_REF_NONE</code> <code>source</code> <code>0</code> <code>Param0</code> ... <code>Param3</code> <code>0</code> <p>Note</p> <p>Message is sent only when the engine is not in developer mode (<code>debugMode &amp; 0x100 [INEDITOR] == 0</code>).</p>"},{"location":"cog/#message-initialized","title":"Message: initialized","text":"<p>Message is sent by  game engine to Thing COG script after Thing object was initialized.</p> Param Value <code>senderType</code> <code>COG_SYM_REF_THING</code> <code>sender</code> Thing that was initialized <code>sourceType</code> <code>COG_SYM_REF_NONE</code> <code>source</code> <code>0</code> <code>Param0</code> ... <code>Param3</code> <code>0</code> <p>Note</p> <p>Message is sent only when the engine is not in developer mode (<code>debugMode &amp; 0x100 [INEDITOR] == 0</code>).</p>"},{"location":"cog/#message-removed","title":"Message: removed","text":"<p>Message is sent by game engine to Thing COG script and COG script which captured Thing when the Thing object is removed from the game.</p> Param Value <code>senderType</code> <code>COG_SYM_REF_THING</code> <code>sender</code> Thing which is removed <code>sourceType</code> <code>COG_SYM_REF_NONE</code> <code>source</code> <code>0</code> <code>Param0</code> ... <code>Param3</code> <code>0</code>"},{"location":"cog/#message-user0","title":"Message: user0","text":"<p>User defined message no. 0.</p> <p>Sent by the game engine</p> <p>Sent to <code>weap_whip.cog</code> script by whip Thing object indicating that the whip swing mode has started.</p> Param Value <code>senderType</code> <code>COG_SYM_REF_THING</code> <code>sender</code> Whip Thing <code>sourceType</code> <code>COG_SYM_REF_THING</code> <code>source</code> Player Thing <code>Param0</code> ... <code>Param3</code> <code>0</code>"},{"location":"cog/#message-user2","title":"Message: user2","text":"<p>User defined message no. 2.</p> <p>Sent by the game engine</p> <p>When COG function StartCutscene is called <code>user2</code> message is sent to the player Thing. The player is invulnerable during the cutscene.</p> Param Value <code>senderType</code> <code>COG_SYM_REF_THING</code> <code>sender</code> Player Thing <code>sourceType</code> <code>COG_SYM_REF_NONE</code> <code>source</code> <code>0</code> <code>Param0</code> ... <code>Param3</code> <code>0</code>"},{"location":"cog/#cog-host-functions","title":"COG Host Functions","text":"<p>AI COG functions Jones System COG functions Player COG functions Sector COG functions Sound COG functions Surface COG functions System COG functions Thing COG functions Voice COG functions</p>"},{"location":"cog/cog_ai/","title":"AI COG Functions","text":""},{"location":"cog/cog_ai/#function-list","title":"Function List","text":"<ul> <li>AIGetMode</li> <li>AISetMode</li> <li>AIClearMode</li> <li>AIGetSubMode</li> <li>AISetSubMode</li> <li>AIClearSubMode</li> <li>AIGetMovePos</li> <li>AISetMovePos</li> <li>AIGetHomePos</li> <li>AIPauseMove</li> <li>AISetMaxHomeDist</li> <li>AIGetGoalThing</li> <li>AIGetGoalLVec</li> <li>FirstThingInView</li> <li>NextThingInView</li> <li>ThingViewDot</li> <li>AISetFireTarget</li> <li>AISetMoveThing</li> <li>AISetLookPos</li> <li>AISetMoveSpeed</li> <li>AISetLookFrame</li> <li>AISetMoveFrame</li> <li>IsAITargetInSight</li> <li>AIFlee</li> <li>AIStopFlee</li> <li>AISetClass</li> <li>AIJump</li> <li>AIEnableInstinct</li> <li>AISetLookThing</li> <li>AISetLookThingEyeLevel</li> <li>AIWaitForStop</li> <li>AIWaitForHeadTracking</li> <li>AIGetArmedMode</li> <li>AIKnockout</li> <li>AIRunOver</li> <li>AISetAllowedSurfaceType</li> <li>AIClearAllowedSurfaceType</li> <li>AISetCutsceneMode</li> <li>AIClearCutsceneMode</li> <li>AISetGoalThing</li> <li>AIEnableHeadTracking</li> <li>AIDisableHeadTracking</li> <li>AIEnableBodyTracking</li> <li>AIDisableBodyTracking</li> <li>AISetWpnt</li> <li>AISetWpntRank</li> <li>AISetWpntFlags</li> <li>AIClearWpntFlags</li> <li>AISetActiveWpntLayer</li> <li>AIConnectWpnts</li> <li>AIConnectWpntsOneWay</li> <li>AITraverseWpnts</li> <li>AIClearTraverseWpnts</li> <li>AIFindNearestWpnt</li> <li>AIWpntHuntTarget</li> <li>AISetInstinctWpntMode</li> <li>AIClearInstinctWpntMode</li> <li>AISpat</li> <li>AIFleeToWpnt</li> </ul>"},{"location":"cog/cog_ai/#aigetmode","title":"AIGetMode","text":"<pre><code>AIGetMode(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_ai/#aisetmode","title":"AISetMode","text":"<pre><code>AISetMode(Thing thing, int newMode)\n</code></pre>"},{"location":"cog/cog_ai/#aiclearmode","title":"AIClearMode","text":"<pre><code>AIClearMode(Thing thing, int mode)\n</code></pre>"},{"location":"cog/cog_ai/#aigetsubmode","title":"AIGetSubMode","text":"<pre><code>AIGetSubMode(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_ai/#aisetsubmode","title":"AISetSubMode","text":"<pre><code>AISetSubMode(Thing thing, int submode)\n</code></pre>"},{"location":"cog/cog_ai/#aiclearsubmode","title":"AIClearSubMode","text":"<pre><code>AIClearSubMode(Thing thing, int submode)\n</code></pre>"},{"location":"cog/cog_ai/#aigetmovepos","title":"AIGetMovePos","text":"<pre><code>AIGetMovePos(Thing thing) -&gt; Vector\n</code></pre>"},{"location":"cog/cog_ai/#aisetmovepos","title":"AISetMovePos","text":"<pre><code>AISetMovePos(Thing thing, Vector pos, int bWait)\n</code></pre>"},{"location":"cog/cog_ai/#aigethomepos","title":"AIGetHomePos","text":"<pre><code>AIGetHomePos(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_ai/#aipausemove","title":"AIPauseMove","text":"<pre><code>AIPauseMove(Thing thing, int msecPause)\n</code></pre>"},{"location":"cog/cog_ai/#aisetmaxhomedist","title":"AISetMaxHomeDist","text":"<pre><code>AISetMaxHomeDist(Thing thing, float dist)\n</code></pre>"},{"location":"cog/cog_ai/#aigetgoalthing","title":"AIGetGoalThing","text":"<pre><code>AIGetGoalThing(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_ai/#aigetgoallvec","title":"AIGetGoalLVec","text":"<pre><code>AIGetGoalLVec(Thing thing) -&gt; Vector\n</code></pre>"},{"location":"cog/cog_ai/#firstthinginview","title":"FirstThingInView","text":"<pre><code>FirstThingInView(Thing thing, float fovX, float distance, int thingTypeMask) -&gt; int\n</code></pre>"},{"location":"cog/cog_ai/#nextthinginview","title":"NextThingInView","text":"<pre><code>NextThingInView() -&gt; int\n</code></pre>"},{"location":"cog/cog_ai/#thingviewdot","title":"ThingViewDot","text":"<pre><code>ThingViewDot(Thing thing1, Thing thing2) -&gt; float\n</code></pre>"},{"location":"cog/cog_ai/#aisetfiretarget","title":"AISetFireTarget","text":"<pre><code>AISetFireTarget(Thing thing, Thing target)\n</code></pre>"},{"location":"cog/cog_ai/#aisetmovething","title":"AISetMoveThing","text":"<pre><code>AISetMoveThing(Thing thing, Thing goalThing, int bWait)\n</code></pre>"},{"location":"cog/cog_ai/#aisetlookpos","title":"AISetLookPos","text":"<pre><code>AISetLookPos(Thing thing, Vector targetPos)\n</code></pre>"},{"location":"cog/cog_ai/#aisetmovespeed","title":"AISetMoveSpeed","text":"<pre><code>AISetMoveSpeed(Thing thing, float speed)\n</code></pre>"},{"location":"cog/cog_ai/#aisetlookframe","title":"AISetLookFrame","text":"<pre><code>AISetLookFrame(Thing thing, int frameNum)\n</code></pre>"},{"location":"cog/cog_ai/#aisetmoveframe","title":"AISetMoveFrame","text":"<pre><code>AISetMoveFrame(Thing thing, int frame)\n</code></pre>"},{"location":"cog/cog_ai/#isaitargetinsight","title":"IsAITargetInSight","text":"<pre><code>IsAITargetInSight(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_ai/#aiflee","title":"AIFlee","text":"<pre><code>AIFlee(Thing thing, Thing fleeFromThing)\n</code></pre>"},{"location":"cog/cog_ai/#aistopflee","title":"AIStopFlee","text":"<pre><code>AIStopFlee(Thing thing)\n</code></pre>"},{"location":"cog/cog_ai/#aisetclass","title":"AISetClass","text":"<pre><code>AISetClass(Thing thing, AI class)\n</code></pre>"},{"location":"cog/cog_ai/#aijump","title":"AIJump","text":"<pre><code>AIJump(Thing thing, Vector movePos, float unknown/unused)\n</code></pre>"},{"location":"cog/cog_ai/#aienableinstinct","title":"AIEnableInstinct","text":"<pre><code>AIEnableInstinct(Thing thing, string instinctName, int bEnable) -&gt; int\n</code></pre>"},{"location":"cog/cog_ai/#aisetlookthing","title":"AISetLookThing","text":"<pre><code>AISetLookThing(Thing thing, Thing target)\n</code></pre>"},{"location":"cog/cog_ai/#aisetlookthingeyelevel","title":"AISetLookThingEyeLevel","text":"<pre><code>AISetLookThingEyeLevel(Thing thing, Thing target)\n</code></pre>"},{"location":"cog/cog_ai/#aiwaitforstop","title":"AIWaitForStop","text":"<pre><code>AIWaitForStop(Thing thing)\n</code></pre>"},{"location":"cog/cog_ai/#aiwaitforheadtracking","title":"AIWaitForHeadTracking","text":"<pre><code>AIWaitForHeadTracking(Thing thing)\n</code></pre>"},{"location":"cog/cog_ai/#aigetarmedmode","title":"AIGetArmedMode","text":"<pre><code>AIGetArmedMode(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_ai/#aiknockout","title":"AIKnockout","text":"<pre><code>AIKnockout(Thing thing, float secDuration, int timerId)\n</code></pre>"},{"location":"cog/cog_ai/#airunover","title":"AIRunOver","text":"<pre><code>AIRunOver(Thing thing, float duration, int id)\n</code></pre>"},{"location":"cog/cog_ai/#aisetallowedsurfacetype","title":"AISetAllowedSurfaceType","text":"<pre><code>AISetAllowedSurfaceType(Thing thing, int surftypes)\n</code></pre>"},{"location":"cog/cog_ai/#aiclearallowedsurfacetype","title":"AIClearAllowedSurfaceType","text":"<pre><code>AIClearAllowedSurfaceType(Thing thing, int surftypes)\n</code></pre>"},{"location":"cog/cog_ai/#aisetcutscenemode","title":"AISetCutsceneMode","text":"<pre><code>AISetCutsceneMode(Thing thing)\n</code></pre>"},{"location":"cog/cog_ai/#aiclearcutscenemode","title":"AIClearCutsceneMode","text":"<pre><code>AIClearCutsceneMode(Thing thing)\n</code></pre>"},{"location":"cog/cog_ai/#aisetgoalthing","title":"AISetGoalThing","text":"<pre><code>AISetGoalThing(Thing thing, Thing goalThing)\n</code></pre>"},{"location":"cog/cog_ai/#aienableheadtracking","title":"AIEnableHeadTracking","text":"<pre><code>AIEnableHeadTracking(Thing thing, Thing target)\n</code></pre>"},{"location":"cog/cog_ai/#aidisableheadtracking","title":"AIDisableHeadTracking","text":"<pre><code>AIDisableHeadTracking(Thing thing)\n</code></pre>"},{"location":"cog/cog_ai/#aienablebodytracking","title":"AIEnableBodyTracking","text":"<pre><code>AIEnableBodyTracking(Thing thing, Thing target)\n</code></pre>"},{"location":"cog/cog_ai/#aidisablebodytracking","title":"AIDisableBodyTracking","text":"<pre><code>AIDisableBodyTracking(Thing thing)\n</code></pre>"},{"location":"cog/cog_ai/#aisetwpnt","title":"AISetWpnt","text":"<pre><code>AISetWpnt(Thing thing, int wpntIdx)\n</code></pre>"},{"location":"cog/cog_ai/#aisetwpntrank","title":"AISetWpntRank","text":"<pre><code>AISetWpntRank(int wpntNum, int rank)\n</code></pre>"},{"location":"cog/cog_ai/#aisetwpntflags","title":"AISetWpntFlags","text":"<pre><code>AISetWpntFlags(int wpntNum, int flags)\n</code></pre>"},{"location":"cog/cog_ai/#aiclearwpntflags","title":"AIClearWpntFlags","text":"<pre><code>AIClearWpntFlags(int wpntIdx, int flags)\n</code></pre>"},{"location":"cog/cog_ai/#aisetactivewpntlayer","title":"AISetActiveWpntLayer","text":"<pre><code>AISetActiveWpntLayer(int layer)\n</code></pre>"},{"location":"cog/cog_ai/#aiconnectwpnts","title":"AIConnectWpnts","text":"<pre><code>AIConnectWpnts(int wpntIdx1, int wpntIdx2)\n</code></pre>"},{"location":"cog/cog_ai/#aiconnectwpntsoneway","title":"AIConnectWpntsOneWay","text":"<pre><code>AIConnectWpntsOneWay(int wpntIdx1, int wpntIdx2)\n</code></pre>"},{"location":"cog/cog_ai/#aitraversewpnts","title":"AITraverseWpnts","text":"<pre><code>AITraverseWpnts(Thing thing, int wpntIdx, float moveSpeed, float degTurn, int mode) -&gt; int\n</code></pre>"},{"location":"cog/cog_ai/#aicleartraversewpnts","title":"AIClearTraverseWpnts","text":"<pre><code>AIClearTraverseWpnts(Thing thing)\n</code></pre>"},{"location":"cog/cog_ai/#aifindnearestwpnt","title":"AIFindNearestWpnt","text":"<pre><code>AIFindNearestWpnt(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_ai/#aiwpnthunttarget","title":"AIWpntHuntTarget","text":"<pre><code>AIWpntHuntTarget(Thing thing, float moveSpeed, float degTurn) -&gt; int\n</code></pre>"},{"location":"cog/cog_ai/#aisetinstinctwpntmode","title":"AISetInstinctWpntMode","text":"<pre><code>AISetInstinctWpntMode(Thing thing)\n</code></pre>"},{"location":"cog/cog_ai/#aiclearinstinctwpntmode","title":"AIClearInstinctWpntMode","text":"<pre><code>AIClearInstinctWpntMode(Thing thing)\n</code></pre>"},{"location":"cog/cog_ai/#aispat","title":"AISpat","text":"<pre><code>AISpat(Thing thing, float duration, int timerId)\n</code></pre>"},{"location":"cog/cog_ai/#aifleetowpnt","title":"AIFleeToWpnt","text":"<pre><code>AIFleeToWpnt(Thing thing, int idx)\n</code></pre>"},{"location":"cog/cog_jones/","title":"Jones COG Functions","text":""},{"location":"cog/cog_jones/#function-list","title":"Function List","text":"<ul> <li>HealthDisplayOff</li> <li>HealthDisplayOn</li> <li>JonesInvItemChanged</li> <li>JonesEndLevel</li> <li>ExitToShell</li> <li>StartCutscene</li> <li>EndCutscene</li> <li>UpdateDifficulty</li> <li>EnableInterface</li> </ul>"},{"location":"cog/cog_jones/#healthdisplayoff","title":"HealthDisplayOff","text":"<pre><code>HealthDisplayOff()\n</code></pre>"},{"location":"cog/cog_jones/#healthdisplayon","title":"HealthDisplayOn","text":"<pre><code>HealthDisplayOn()\n</code></pre>"},{"location":"cog/cog_jones/#jonesinvitemchanged","title":"JonesInvItemChanged","text":"<pre><code>JonesInvItemChanged(int bin)\n</code></pre>"},{"location":"cog/cog_jones/#jonesendlevel","title":"JonesEndLevel","text":"<pre><code>JonesEndLevel()\n</code></pre>"},{"location":"cog/cog_jones/#exittoshell","title":"ExitToShell","text":"<pre><code>ExitToShell()\n</code></pre>"},{"location":"cog/cog_jones/#startcutscene","title":"StartCutscene","text":"<p><pre><code>StartCutscene(int type)\n</code></pre> <code>type</code> argument controls the appearance of HUD elements during the cutscene. - 0 - All HUD remains visible during the cutscene. - 1 - Health indicator fades out smoothly. Stamina bar disappears instantly. - 2 - All HUD elements instantly disappear.</p>"},{"location":"cog/cog_jones/#endcutscene","title":"EndCutscene","text":"<pre><code>EndCutscene()\n</code></pre>"},{"location":"cog/cog_jones/#updatedifficulty","title":"UpdateDifficulty","text":"<pre><code>UpdateDifficulty(int difficulty)\n</code></pre>"},{"location":"cog/cog_jones/#enableinterface","title":"EnableInterface","text":"<pre><code>EnableInterface(int bEnable)\n</code></pre>"},{"location":"cog/cog_player/","title":"Player COG Functions","text":""},{"location":"cog/cog_player/#function-list","title":"Function List","text":"<ul> <li>SetInvActivated</li> <li>SetInvAvailable</li> <li>SetInvDisabled</li> <li>IsInvActivated</li> <li>IsInvAvailable</li> <li>SetGoalFlags</li> <li>ClearGoalFlags</li> <li>GetNumPlayers</li> <li>GetMaxPlayers</li> <li>GetAbsoluteMaxPlayers</li> <li>GetLocalPlayerThing</li> <li>GetPlayerThing</li> <li>GetPlayerNum</li> <li>PickupBackpack</li> <li>CreateBackpack</li> <li>NthBackpackBin</li> <li>NthBackpackValue</li> <li>numbackpackitems</li> <li>GetRespawnMask</li> <li>SetRespawnMask</li> <li>SyncScores</li> <li>GetCurItem</li> <li>JewelFlyingStatus</li> <li>StartJewelFlying</li> <li>IsAiming</li> <li>SetSwimmingInventory</li> <li>StartInvisibility</li> <li>EndInvisibility</li> <li>IsInvisible</li> <li>ResetInventory</li> <li>MakeMeStop</li> <li>IsItemFound</li> <li>SetWhipElectric</li> <li>PlayerInPor</li> <li>GetCutsceneMode</li> <li>GetLastWeapon</li> <li>MakeMeAPirate</li> <li>IMPStartFiring</li> <li>IMPEndFiring</li> </ul>"},{"location":"cog/cog_player/#setinvactivated","title":"SetInvActivated","text":"<pre><code>SetInvActivated(Thing thing, int typeId, int bActivated)\n</code></pre>"},{"location":"cog/cog_player/#setinvavailable","title":"SetInvAvailable","text":"<pre><code>SetInvAvailable(Thing thing, int typeId, int bAvailable)\n</code></pre>"},{"location":"cog/cog_player/#setinvdisabled","title":"SetInvDisabled","text":"<pre><code>SetInvDisabled(Thing thing, int typeId, int bDisabled)\n</code></pre>"},{"location":"cog/cog_player/#isinvactivated","title":"IsInvActivated","text":"<pre><code>IsInvActivated(Thing thing, int bin) -&gt; int\n</code></pre>"},{"location":"cog/cog_player/#isinvavailable","title":"IsInvAvailable","text":"<pre><code>IsInvAvailable(Thing thing, int typeId) -&gt; int\n</code></pre>"},{"location":"cog/cog_player/#setgoalflags","title":"SetGoalFlags","text":"<pre><code>SetGoalFlags(Thing thing, int bin, int flags)\n</code></pre>"},{"location":"cog/cog_player/#cleargoalflags","title":"ClearGoalFlags","text":"<pre><code>ClearGoalFlags(Thing thing, int bin, int flags)\n</code></pre>"},{"location":"cog/cog_player/#getnumplayers","title":"GetNumPlayers","text":"<pre><code>GetNumPlayers() -&gt; int\n</code></pre>"},{"location":"cog/cog_player/#getmaxplayers","title":"GetMaxPlayers","text":"<pre><code>GetMaxPlayers() -&gt; int\n</code></pre>"},{"location":"cog/cog_player/#getabsolutemaxplayers","title":"GetAbsoluteMaxPlayers","text":"<pre><code>GetAbsoluteMaxPlayers() -&gt; int\n</code></pre>"},{"location":"cog/cog_player/#getlocalplayerthing","title":"GetLocalPlayerThing","text":"<pre><code>GetLocalPlayerThing() -&gt; int\n</code></pre>"},{"location":"cog/cog_player/#getplayerthing","title":"GetPlayerThing","text":"<pre><code>GetPlayerThing(int playerNum) -&gt; int\n</code></pre>"},{"location":"cog/cog_player/#getplayernum","title":"GetPlayerNum","text":"<pre><code>GetPlayerNum(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_player/#pickupbackpack","title":"PickupBackpack","text":"<pre><code>PickupBackpack(Thing thing, Thing backpack)\n</code></pre>"},{"location":"cog/cog_player/#createbackpack","title":"CreateBackpack","text":"<pre><code>CreateBackpack(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_player/#nthbackpackbin","title":"NthBackpackBin","text":"<pre><code>NthBackpackBin(Thing thing, int itemNum) -&gt; int\n</code></pre>"},{"location":"cog/cog_player/#nthbackpackvalue","title":"NthBackpackValue","text":"<pre><code>NthBackpackValue(Thing thing, int itemId) -&gt; float\n</code></pre>"},{"location":"cog/cog_player/#numbackpackitems","title":"numbackpackitems","text":"<pre><code>numbackpackitems(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_player/#getrespawnmask","title":"GetRespawnMask","text":"<pre><code>GetRespawnMask(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_player/#setrespawnmask","title":"SetRespawnMask","text":"<pre><code>SetRespawnMask(Thing thing, int mask)\n</code></pre>"},{"location":"cog/cog_player/#syncscores","title":"SyncScores","text":"<pre><code>SyncScores()\n</code></pre>"},{"location":"cog/cog_player/#getcuritem","title":"GetCurItem","text":"<pre><code>GetCurItem(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_player/#jewelflyingstatus","title":"JewelFlyingStatus","text":"<pre><code>JewelFlyingStatus(int value, Thing plasma)\n</code></pre>"},{"location":"cog/cog_player/#startjewelflying","title":"StartJewelFlying","text":"<pre><code>StartJewelFlying() -&gt; int\n</code></pre>"},{"location":"cog/cog_player/#isaiming","title":"IsAiming","text":"<pre><code>IsAiming(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_player/#setswimminginventory","title":"SetSwimmingInventory","text":"<pre><code>SetSwimmingInventory(Thing thing, int bItemsAvailable)\n</code></pre>"},{"location":"cog/cog_player/#startinvisibility","title":"StartInvisibility","text":"<pre><code>StartInvisibility()\n</code></pre>"},{"location":"cog/cog_player/#endinvisibility","title":"EndInvisibility","text":"<pre><code>EndInvisibility()\n</code></pre>"},{"location":"cog/cog_player/#isinvisible","title":"IsInvisible","text":"<pre><code>IsInvisible() -&gt; int\n</code></pre>"},{"location":"cog/cog_player/#resetinventory","title":"ResetInventory","text":"<pre><code>ResetInventory(Thing thing)\n</code></pre>"},{"location":"cog/cog_player/#makemestop","title":"MakeMeStop","text":"<pre><code>MakeMeStop() -&gt; int\n</code></pre>"},{"location":"cog/cog_player/#isitemfound","title":"IsItemFound","text":"<pre><code>IsItemFound(int itemID) -&gt; int\n</code></pre>"},{"location":"cog/cog_player/#setwhipelectric","title":"SetWhipElectric","text":"<pre><code>SetWhipElectric(int bElectrict)\n</code></pre>"},{"location":"cog/cog_player/#playerinpor","title":"PlayerInPor","text":"<pre><code>PlayerInPor(int bInPor)\n</code></pre>"},{"location":"cog/cog_player/#getcutscenemode","title":"GetCutsceneMode","text":"<pre><code>GetCutsceneMode() -&gt; int\n</code></pre>"},{"location":"cog/cog_player/#getlastweapon","title":"GetLastWeapon","text":"<pre><code>GetLastWeapon() -&gt; int\n</code></pre>"},{"location":"cog/cog_player/#makemeapirate","title":"MakeMeAPirate","text":"<p><pre><code>MakeMeAPirate()\n</code></pre> Toggles Guybrush easter egg.</p>"},{"location":"cog/cog_player/#impstartfiring","title":"IMPStartFiring","text":"<pre><code>IMPStartFiring(int fireType)\n</code></pre>"},{"location":"cog/cog_player/#impendfiring","title":"IMPEndFiring","text":"<pre><code>IMPEndFiring(int fireType)\n</code></pre>"},{"location":"cog/cog_sector/","title":"Sector COG Functions","text":""},{"location":"cog/cog_sector/#function-list","title":"Function List","text":"<ul> <li>GetSectorTint</li> <li>SetSectorTint</li> <li>SetSectorAdjoins</li> <li>SectorAdjoins</li> <li>GetSectorLight</li> <li>SetSectorLight</li> <li>SectorLight</li> <li>GetColormap</li> <li>GetSectorColormap</li> <li>SetColormap</li> <li>SetSectorColormap</li> <li>GetSectorThrust</li> <li>SetSectorThrust</li> <li>SectorThrust</li> <li>GetSectorFlags</li> <li>SetSectorFlags</li> <li>ClearSectorFlags</li> <li>GetSectorThingCount</li> <li>SectorThingCount</li> <li>GetSectorPlayerCount</li> <li>SectorPlayerCount</li> <li>GetSectorCount</li> <li>GetSectorCenter</li> <li>GetNumSectorVertices</li> <li>GetSectorVertexPos</li> <li>GetNumSectorSurfaces</li> <li>GetSectorSurfaceRef</li> <li>SyncSector</li> <li>FindSectorAtPos</li> <li>SetSectorSurfflags</li> <li>ClearSectorSurfflags</li> </ul>"},{"location":"cog/cog_sector/#getsectortint","title":"GetSectorTint","text":"<pre><code>GetSectorTint(Sector sector) -&gt; Vector\n</code></pre>"},{"location":"cog/cog_sector/#setsectortint","title":"SetSectorTint","text":"<pre><code>SetSectorTint(Sector sector, Vector color)\n</code></pre>"},{"location":"cog/cog_sector/#setsectoradjoins","title":"SetSectorAdjoins","text":"<pre><code>SetSectorAdjoins(Sector sector, int bOn)\n</code></pre>"},{"location":"cog/cog_sector/#sectoradjoins","title":"SectorAdjoins","text":"<pre><code>SectorAdjoins(Sector sector, int bOn)\n</code></pre>"},{"location":"cog/cog_sector/#getsectorlight","title":"GetSectorLight","text":"<pre><code>GetSectorLight(Sector sector) -&gt; float\n</code></pre>"},{"location":"cog/cog_sector/#setsectorlight","title":"SetSectorLight","text":"<pre><code>SetSectorLight(Sector sector, Vector color, float timeDelta)\n</code></pre>"},{"location":"cog/cog_sector/#sectorlight","title":"SectorLight","text":"<pre><code>SectorLight(Sector sector, Vector color, float timeDelta)\n</code></pre>"},{"location":"cog/cog_sector/#getcolormap","title":"GetColormap","text":"<pre><code>GetColormap(Sector value) -&gt; int\n</code></pre>"},{"location":"cog/cog_sector/#getsectorcolormap","title":"GetSectorColormap","text":"<pre><code>GetSectorColormap(Sector value) -&gt; int\n</code></pre>"},{"location":"cog/cog_sector/#setcolormap","title":"SetColormap","text":"<pre><code>SetColormap(int value)\n</code></pre>"},{"location":"cog/cog_sector/#setsectorcolormap","title":"SetSectorColormap","text":"<pre><code>SetSectorColormap(int value)\n</code></pre>"},{"location":"cog/cog_sector/#getsectorthrust","title":"GetSectorThrust","text":"<pre><code>GetSectorThrust(Sector sector) -&gt; Vector\n</code></pre>"},{"location":"cog/cog_sector/#setsectorthrust","title":"SetSectorThrust","text":"<pre><code>SetSectorThrust(Sector sector, Vector vecDirect, float thrust)\n</code></pre>"},{"location":"cog/cog_sector/#sectorthrust","title":"SectorThrust","text":"<pre><code>SectorThrust(Sector sector, Vector vecDirect, float thrust)\n</code></pre>"},{"location":"cog/cog_sector/#getsectorflags","title":"GetSectorFlags","text":"<pre><code>GetSectorFlags(Sector sector) -&gt; int\n</code></pre>"},{"location":"cog/cog_sector/#setsectorflags","title":"SetSectorFlags","text":"<pre><code>SetSectorFlags(Sector sector, int flags)\n</code></pre>"},{"location":"cog/cog_sector/#clearsectorflags","title":"ClearSectorFlags","text":"<pre><code>ClearSectorFlags(Sector sector, int flags)\n</code></pre>"},{"location":"cog/cog_sector/#getsectorthingcount","title":"GetSectorThingCount","text":"<pre><code>GetSectorThingCount(Sector sector) -&gt; int\n</code></pre>"},{"location":"cog/cog_sector/#sectorthingcount","title":"SectorThingCount","text":"<pre><code>SectorThingCount(Sector sector) -&gt; int\n</code></pre>"},{"location":"cog/cog_sector/#getsectorplayercount","title":"GetSectorPlayerCount","text":"<pre><code>GetSectorPlayerCount(Sector sector) -&gt; int\n</code></pre>"},{"location":"cog/cog_sector/#sectorplayercount","title":"SectorPlayerCount","text":"<pre><code>SectorPlayerCount(Sector sector) -&gt; int\n</code></pre>"},{"location":"cog/cog_sector/#getsectorcount","title":"GetSectorCount","text":"<pre><code>GetSectorCount() -&gt; int\n</code></pre>"},{"location":"cog/cog_sector/#getsectorcenter","title":"GetSectorCenter","text":"<pre><code>GetSectorCenter(Sector sector) -&gt; Vector\n</code></pre>"},{"location":"cog/cog_sector/#getnumsectorvertices","title":"GetNumSectorVertices","text":"<pre><code>GetNumSectorVertices(Sector sector) -&gt; int\n</code></pre>"},{"location":"cog/cog_sector/#getsectorvertexpos","title":"GetSectorVertexPos","text":"<pre><code>GetSectorVertexPos(Sector sector, int vertNum) -&gt; Vector\n</code></pre>"},{"location":"cog/cog_sector/#getnumsectorsurfaces","title":"GetNumSectorSurfaces","text":"<pre><code>GetNumSectorSurfaces(Sector sector) -&gt; int\n</code></pre>"},{"location":"cog/cog_sector/#getsectorsurfaceref","title":"GetSectorSurfaceRef","text":"<pre><code>GetSectorSurfaceRef(Sector sector, int surfIdx) -&gt; int\n</code></pre>"},{"location":"cog/cog_sector/#syncsector","title":"SyncSector","text":"<pre><code>SyncSector(Sector sector)\n</code></pre>"},{"location":"cog/cog_sector/#findsectoratpos","title":"FindSectorAtPos","text":"<pre><code>FindSectorAtPos(Vector pos) -&gt; int\n</code></pre>"},{"location":"cog/cog_sector/#setsectorsurfflags","title":"SetSectorSurfflags","text":"<pre><code>SetSectorSurfflags(Sector sector, int surfflags)\n</code></pre>"},{"location":"cog/cog_sector/#clearsectorsurfflags","title":"ClearSectorSurfflags","text":"<pre><code>ClearSectorSurfflags(Sector sector, int surfflags)\n</code></pre>"},{"location":"cog/cog_sound/","title":"Sound COG Functions","text":""},{"location":"cog/cog_sound/#function-list","title":"Function List","text":"<ul> <li>PlaySoundThing</li> <li>StopSoundThing</li> <li>PlaySoundPos</li> <li>PlaySoundLocal</li> <li>PlaySoundGlobal</li> <li>StopSound</li> <li>LoadSound</li> <li>PlaySoundClass</li> <li>StopSoundClass</li> <li>PlayVoiceMode</li> <li>ChangeSoundVol</li> <li>ChangeSoundPitch</li> <li>SectorSound</li> <li>GetSoundLen</li> <li>WaitForSound</li> <li>StopAllSoundsThing</li> </ul>"},{"location":"cog/cog_sound/#playsoundthing","title":"PlaySoundThing","text":"<pre><code>PlaySoundThing(Sound snd, Thing thing, float volume, float playMinRadius, float playMaxRadius, int playflags) -&gt; int\n</code></pre>"},{"location":"cog/cog_sound/#stopsoundthing","title":"StopSoundThing","text":"<pre><code>StopSoundThing(Sound snd, Thing thing)\n</code></pre>"},{"location":"cog/cog_sound/#playsoundpos","title":"PlaySoundPos","text":"<pre><code>PlaySoundPos(Sound snd, Vector vec, float volume, float minRadius, float maxRadius, int playflags) -&gt; int\n</code></pre>"},{"location":"cog/cog_sound/#playsoundlocal","title":"PlaySoundLocal","text":"<pre><code>PlaySoundLocal(Sound snd, float volume, float pan, int playflags, int bWait) -&gt; int\n</code></pre>"},{"location":"cog/cog_sound/#playsoundglobal","title":"PlaySoundGlobal","text":"<pre><code>PlaySoundGlobal(Sound snd, float volume, float pan, int flags, int bWait) -&gt; int\n</code></pre>"},{"location":"cog/cog_sound/#stopsound","title":"StopSound","text":"<pre><code>StopSound(int channelGUID, float secFadeTime)\n</code></pre>"},{"location":"cog/cog_sound/#loadsound","title":"LoadSound","text":"<pre><code>LoadSound(string filename) -&gt; int\n</code></pre>"},{"location":"cog/cog_sound/#playsoundclass","title":"PlaySoundClass","text":"<pre><code>PlaySoundClass(Thing thing, int mode) -&gt; int\n</code></pre>"},{"location":"cog/cog_sound/#stopsoundclass","title":"StopSoundClass","text":"<pre><code>StopSoundClass(Thing thing, int mode)\n</code></pre>"},{"location":"cog/cog_sound/#playvoicemode","title":"PlayVoiceMode","text":"<pre><code>PlayVoiceMode(Thing thing, int mode)\n</code></pre>"},{"location":"cog/cog_sound/#changesoundvol","title":"ChangeSoundVol","text":"<pre><code>ChangeSoundVol(int guid, float volume, float secFadeTime)\n</code></pre>"},{"location":"cog/cog_sound/#changesoundpitch","title":"ChangeSoundPitch","text":"<pre><code>ChangeSoundPitch(int guid, float pitch, float secFadeTime)\n</code></pre>"},{"location":"cog/cog_sound/#sectorsound","title":"SectorSound","text":"<pre><code>SectorSound(Sector sector, Sound snd, float volume)\n</code></pre>"},{"location":"cog/cog_sound/#getsoundlen","title":"GetSoundLen","text":"<pre><code>GetSoundLen(Sound snd) -&gt; float\n</code></pre>"},{"location":"cog/cog_sound/#waitforsound","title":"WaitForSound","text":"<pre><code>WaitForSound(int channel) -&gt; int\n</code></pre>"},{"location":"cog/cog_sound/#stopallsoundsthing","title":"StopAllSoundsThing","text":"<pre><code>StopAllSoundsThing(Thing thing)\n</code></pre>"},{"location":"cog/cog_surface/","title":"Surface COG Functions","text":""},{"location":"cog/cog_surface/#function-list","title":"Function List","text":"<ul> <li>GetSurfaceAdjoin</li> <li>GetSurfaceSector</li> <li>GetNumSurfaceVertices</li> <li>GetSurfaceVertexPos</li> <li>SetHorizonSkyOffset</li> <li>GetHorizonSkyOffset</li> <li>SetCeilingSkyOffset</li> <li>GetCeilingSkyOffset</li> <li>SlideHorizonSky</li> <li>SlideCeilingSky</li> <li>GetSurfaceCount</li> <li>SlideWall</li> <li>SlideSurface</li> <li>GetWallCel</li> <li>SetWallCel</li> <li>GetSurfaceCel</li> <li>SetSurfaceCel</li> <li>GetSurfaceMat</li> <li>SetSurfaceMat</li> <li>GetSurfaceFlags</li> <li>SetSurfaceFlags</li> <li>ClearSurfaceFlags</li> <li>GetAdjoinFlags</li> <li>SetAdjoinFlags</li> <li>ClearAdjoinFlags</li> <li>SetFaceType</li> <li>ClearFaceType</li> <li>GetFaceType</li> <li>SetFaceGeoMode</li> <li>GetFaceGeoMode</li> <li>SetFaceLightMode</li> <li>GetFaceLightMode</li> <li>GetSurfaceLight</li> <li>SetSurfaceLight</li> <li>GetSurfaceCenter</li> <li>SurfaceLightAnim</li> <li>GetSurfaceNormal</li> <li>SyncSurface</li> <li>GetAdjoinAlpha</li> <li>SetAdjoinAlpha</li> </ul>"},{"location":"cog/cog_surface/#getsurfaceadjoin","title":"GetSurfaceAdjoin","text":"<pre><code>GetSurfaceAdjoin(Surface surf) -&gt; int\n</code></pre>"},{"location":"cog/cog_surface/#getsurfacesector","title":"GetSurfaceSector","text":"<pre><code>GetSurfaceSector(Surface surf) -&gt; int\n</code></pre>"},{"location":"cog/cog_surface/#getnumsurfacevertices","title":"GetNumSurfaceVertices","text":"<pre><code>GetNumSurfaceVertices(Surface surf) -&gt; int\n</code></pre>"},{"location":"cog/cog_surface/#getsurfacevertexpos","title":"GetSurfaceVertexPos","text":"<pre><code>GetSurfaceVertexPos(Surface surf, int vertNum) -&gt; Vector\n</code></pre>"},{"location":"cog/cog_surface/#sethorizonskyoffset","title":"SetHorizonSkyOffset","text":"<pre><code>SetHorizonSkyOffset(Vector offset)\n</code></pre>"},{"location":"cog/cog_surface/#gethorizonskyoffset","title":"GetHorizonSkyOffset","text":"<pre><code>GetHorizonSkyOffset() -&gt; Vector\n</code></pre>"},{"location":"cog/cog_surface/#setceilingskyoffset","title":"SetCeilingSkyOffset","text":"<pre><code>SetCeilingSkyOffset(Vector offset)\n</code></pre>"},{"location":"cog/cog_surface/#getceilingskyoffset","title":"GetCeilingSkyOffset","text":"<pre><code>GetCeilingSkyOffset() -&gt; Vector\n</code></pre>"},{"location":"cog/cog_surface/#slidehorizonsky","title":"SlideHorizonSky","text":"<pre><code>SlideHorizonSky(float x, float y) -&gt; int\n</code></pre>"},{"location":"cog/cog_surface/#slideceilingsky","title":"SlideCeilingSky","text":"<pre><code>SlideCeilingSky(float x, float y) -&gt; int\n</code></pre>"},{"location":"cog/cog_surface/#getsurfacecount","title":"GetSurfaceCount","text":"<pre><code>GetSurfaceCount() -&gt; int\n</code></pre>"},{"location":"cog/cog_surface/#slidewall","title":"SlideWall","text":"<pre><code>SlideWall(Surface surf, Vector dir, float speed) -&gt; int\n</code></pre>"},{"location":"cog/cog_surface/#slidesurface","title":"SlideSurface","text":"<pre><code>SlideSurface(Surface surf, Vector dir, float speed) -&gt; int\n</code></pre>"},{"location":"cog/cog_surface/#getwallcel","title":"GetWallCel","text":"<pre><code>GetWallCel(Surface surf) -&gt; int\n</code></pre>"},{"location":"cog/cog_surface/#setwallcel","title":"SetWallCel","text":"<pre><code>SetWallCel(Surface surf, int celNum) -&gt; int\n</code></pre>"},{"location":"cog/cog_surface/#getsurfacecel","title":"GetSurfaceCel","text":"<pre><code>GetSurfaceCel(Surface surf) -&gt; int\n</code></pre>"},{"location":"cog/cog_surface/#setsurfacecel","title":"SetSurfaceCel","text":"<pre><code>SetSurfaceCel(Surface surf, int celNum) -&gt; int\n</code></pre>"},{"location":"cog/cog_surface/#getsurfacemat","title":"GetSurfaceMat","text":"<pre><code>GetSurfaceMat(Surface surf) -&gt; int\n</code></pre>"},{"location":"cog/cog_surface/#setsurfacemat","title":"SetSurfaceMat","text":"<pre><code>SetSurfaceMat(Surface surf, Material mat) -&gt; int\n</code></pre>"},{"location":"cog/cog_surface/#getsurfaceflags","title":"GetSurfaceFlags","text":"<pre><code>GetSurfaceFlags(Surface surf) -&gt; int\n</code></pre>"},{"location":"cog/cog_surface/#setsurfaceflags","title":"SetSurfaceFlags","text":"<pre><code>SetSurfaceFlags(Surface surf, int surfflags)\n</code></pre>"},{"location":"cog/cog_surface/#clearsurfaceflags","title":"ClearSurfaceFlags","text":"<pre><code>ClearSurfaceFlags(Surface surf, int surfflags)\n</code></pre>"},{"location":"cog/cog_surface/#getadjoinflags","title":"GetAdjoinFlags","text":"<pre><code>GetAdjoinFlags(Surface surf) -&gt; int\n</code></pre>"},{"location":"cog/cog_surface/#setadjoinflags","title":"SetAdjoinFlags","text":"<pre><code>SetAdjoinFlags(Surface surf, int adjflags)\n</code></pre>"},{"location":"cog/cog_surface/#clearadjoinflags","title":"ClearAdjoinFlags","text":"<pre><code>ClearAdjoinFlags(Surface surf, int adjflags)\n</code></pre>"},{"location":"cog/cog_surface/#setfacetype","title":"SetFaceType","text":"<pre><code>SetFaceType(Surface surf, int faceflags)\n</code></pre>"},{"location":"cog/cog_surface/#clearfacetype","title":"ClearFaceType","text":"<pre><code>ClearFaceType(Surface surf, int faceflags)\n</code></pre>"},{"location":"cog/cog_surface/#getfacetype","title":"GetFaceType","text":"<pre><code>GetFaceType(Surface surf) -&gt; int\n</code></pre>"},{"location":"cog/cog_surface/#setfacegeomode","title":"SetFaceGeoMode","text":"<pre><code>SetFaceGeoMode(Surface surf, int geo)\n</code></pre>"},{"location":"cog/cog_surface/#getfacegeomode","title":"GetFaceGeoMode","text":"<pre><code>GetFaceGeoMode(Surface surf) -&gt; int\n</code></pre>"},{"location":"cog/cog_surface/#setfacelightmode","title":"SetFaceLightMode","text":"<pre><code>SetFaceLightMode(Surface surf, int lightmode)\n</code></pre>"},{"location":"cog/cog_surface/#getfacelightmode","title":"GetFaceLightMode","text":"<pre><code>GetFaceLightMode(Surface surf) -&gt; int\n</code></pre>"},{"location":"cog/cog_surface/#getsurfacelight","title":"GetSurfaceLight","text":"<pre><code>GetSurfaceLight(Surface surf) -&gt; Vector\n</code></pre>"},{"location":"cog/cog_surface/#setsurfacelight","title":"SetSurfaceLight","text":"<pre><code>SetSurfaceLight(Surface surf, Vector light, float timeDelta) -&gt; int\n</code></pre>"},{"location":"cog/cog_surface/#getsurfacecenter","title":"GetSurfaceCenter","text":"<pre><code>GetSurfaceCenter(Surface surf) -&gt; Vector\n</code></pre>"},{"location":"cog/cog_surface/#surfacelightanim","title":"SurfaceLightAnim","text":"<pre><code>SurfaceLightAnim(Surface surf, float z, float y, float x, float z, float y, float x, float speed) -&gt; int\n</code></pre>"},{"location":"cog/cog_surface/#getsurfacenormal","title":"GetSurfaceNormal","text":"<pre><code>GetSurfaceNormal(Surface surf) -&gt; Vector\n</code></pre>"},{"location":"cog/cog_surface/#syncsurface","title":"SyncSurface","text":"<pre><code>SyncSurface(Surface surf)\n</code></pre>"},{"location":"cog/cog_surface/#getadjoinalpha","title":"GetAdjoinAlpha","text":"<pre><code>GetAdjoinAlpha(Surface surf) -&gt; int\n</code></pre>"},{"location":"cog/cog_surface/#setadjoinalpha","title":"SetAdjoinAlpha","text":"<pre><code>SetAdjoinAlpha(Surface surf, float alpha)\n</code></pre>"},{"location":"cog/cog_system/","title":"System COG Functions","text":""},{"location":"cog/cog_system/#function-list","title":"Function List","text":"<ul> <li>GetSenderRef</li> <li>GetSenderType</li> <li>GetSenderID</li> <li>GetSourceType</li> <li>GetSourceRef</li> <li>GetSysDate</li> <li>GetSysTime</li> <li>InEditor</li> <li>GetThingCount</li> <li>GetGravity</li> <li>SetGravity</li> <li>GetLevelTime</li> <li>GetGameTime</li> <li>GetFlexGameTime</li> <li>GetThingTemplateCount</li> <li>SetFog</li> <li>FindNewSector</li> <li>FindNewSectorFromThing</li> <li>Sleep</li> <li>SetPulse</li> <li>SetTimer</li> <li>SetTimerEx</li> <li>KillTimerEx</li> <li>Reset</li> <li>MaterialAnim</li> <li>StopMaterialAnim</li> <li>StopAnim</li> <li>StopSurfaceAnim</li> <li>GetSurfaceAnim</li> <li>SurfaceAnim</li> <li>GetKeyLen</li> <li>LoadTemplate</li> <li>LoadKeyframe</li> <li>LoadModel</li> <li>Print</li> <li>PrintInt</li> <li>PrintFlex</li> <li>PrintVector</li> <li>printhex</li> <li>VectorAdd</li> <li>VectorSub</li> <li>VectorDot</li> <li>VectorCross</li> <li>VectorSet</li> <li>VectorLen</li> <li>VectorScale</li> <li>VectorDist</li> <li>VectorX</li> <li>VectorY</li> <li>VectorZ</li> <li>VectorNorm</li> <li>VectorEqual</li> <li>VectorRotate</li> <li>VectorTransformToOrient</li> <li>GetSithMode</li> <li>GetDifficulty</li> <li>SetSubModeFlags</li> <li>GetSubModeFlags</li> <li>ClearSubModeFlags</li> <li>SetDebugModeFlags</li> <li>GetDebugModeFlags</li> <li>ClearDebugModeFlags</li> <li>BitSet</li> <li>BitTest</li> <li>BitClear</li> <li>FireProjectile</li> <li>ActivateWeapon</li> <li>DeactivateWeapon</li> <li>DeactivateCurWeapon</li> <li>SetMountWait</li> <li>SetFireWait</li> <li>SetAimWait</li> <li>SelectWeapon</li> <li>SelectWeaponWait</li> <li>DeselectWeapon</li> <li>DeselectWeaponWait</li> <li>SetCurWeapon</li> <li>GetCurWeapon</li> <li>SetWeaponModel</li> <li>ResetWeaponModel</li> <li>LoadHolsterModel</li> <li>SetHolsterModel</li> <li>ResetHolsterModel</li> <li>GetLastPistol</li> <li>GetLastRifle</li> <li>CopyPlayerHolsters</li> <li>SendMessage</li> <li>SendMessageEx</li> <li>ReturnEx</li> <li>GetParam</li> <li>SetParam</li> <li>SetInvFlags</li> <li>SetMapModeFlags</li> <li>GetMapModeFlags</li> <li>ClearMapModeFlags</li> <li>GetMaterialCel</li> <li>SetMaterialCel</li> <li>SetCameraFocus</li> <li>GetPrimaryFocus</li> <li>GetSecondaryFocus</li> <li>SetCurrentCamera</li> <li>GetCurrentCamera</li> <li>CycleCamera</li> <li>SetPOVShake</li> <li>SetCameraStateFlags</li> <li>GetCameraStateFlags</li> <li>SetCameraSecondaryFocus</li> <li>HeapNew</li> <li>HeapSet</li> <li>HeapGet</li> <li>HeapFree</li> <li>GetSelfCog</li> <li>GetMasterCog</li> <li>SetMasterCog</li> <li>GetCogByIndex</li> <li>IsMulti</li> <li>IsServer</li> <li>SendTrigger</li> <li>AutoSavegame</li> <li>GetHintSolved</li> <li>SetHintSolved</li> <li>SetHintUnsolved</li> <li>Rand</li> <li>RandBetween</li> <li>RandVec</li> <li>Round</li> <li>Truncate</li> <li>Abs</li> <li>Pow</li> <li>Sin</li> <li>Cos</li> <li>ArcTan</li> <li>GetPerformanceLevel</li> <li>IsLevelName</li> </ul>"},{"location":"cog/cog_system/#getsenderref","title":"GetSenderRef","text":"<pre><code>GetSenderRef() -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#getsendertype","title":"GetSenderType","text":"<pre><code>GetSenderType() -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#getsenderid","title":"GetSenderID","text":"<pre><code>GetSenderID() -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#getsourcetype","title":"GetSourceType","text":"<pre><code>GetSourceType() -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#getsourceref","title":"GetSourceRef","text":"<pre><code>GetSourceRef() -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#getsysdate","title":"GetSysDate","text":"<pre><code>GetSysDate() -&gt; Vector\n</code></pre>"},{"location":"cog/cog_system/#getsystime","title":"GetSysTime","text":"<pre><code>GetSysTime() -&gt; Vector\n</code></pre>"},{"location":"cog/cog_system/#ineditor","title":"InEditor","text":"<pre><code>InEditor() -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#getthingcount","title":"GetThingCount","text":"<pre><code>GetThingCount() -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#getgravity","title":"GetGravity","text":"<pre><code>GetGravity() -&gt; float\n</code></pre>"},{"location":"cog/cog_system/#setgravity","title":"SetGravity","text":"<pre><code>SetGravity(float gravity)\n</code></pre>"},{"location":"cog/cog_system/#getleveltime","title":"GetLevelTime","text":"<pre><code>GetLevelTime() -&gt; float\n</code></pre>"},{"location":"cog/cog_system/#getgametime","title":"GetGameTime","text":"<pre><code>GetGameTime() -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#getflexgametime","title":"GetFlexGameTime","text":"<pre><code>GetFlexGameTime() -&gt; float\n</code></pre>"},{"location":"cog/cog_system/#getthingtemplatecount","title":"GetThingTemplateCount","text":"<pre><code>GetThingTemplateCount(Template template) -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#setfog","title":"SetFog","text":"<pre><code>SetFog(int bEnable, Vector vecColor, float start, float end)\n</code></pre>"},{"location":"cog/cog_system/#findnewsector","title":"FindNewSector","text":"<pre><code>FindNewSector(Vector startPos, Sector sector, Vector endPos) -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#findnewsectorfromthing","title":"FindNewSectorFromThing","text":"<pre><code>FindNewSectorFromThing(Thing thing, Vector vec) -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#sleep","title":"Sleep","text":"<pre><code>Sleep(float wait)\n</code></pre>"},{"location":"cog/cog_system/#setpulse","title":"SetPulse","text":"<pre><code>SetPulse(float interval)\n</code></pre>"},{"location":"cog/cog_system/#settimer","title":"SetTimer","text":"<pre><code>SetTimer(float when)\n</code></pre>"},{"location":"cog/cog_system/#settimerex","title":"SetTimerEx","text":"<pre><code>SetTimerEx(float when, int param1, int param2, int param3)\n</code></pre>"},{"location":"cog/cog_system/#killtimerex","title":"KillTimerEx","text":"<pre><code>KillTimerEx(int timerId)\n</code></pre>"},{"location":"cog/cog_system/#reset","title":"Reset","text":"<pre><code>Reset()\n</code></pre>"},{"location":"cog/cog_system/#materialanim","title":"MaterialAnim","text":"<pre><code>MaterialAnim(Material mat, float fps, int flags) -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#stopmaterialanim","title":"StopMaterialAnim","text":"<pre><code>StopMaterialAnim(Material material)\n</code></pre>"},{"location":"cog/cog_system/#stopanim","title":"StopAnim","text":"<pre><code>StopAnim(int animID)\n</code></pre>"},{"location":"cog/cog_system/#stopsurfaceanim","title":"StopSurfaceAnim","text":"<pre><code>StopSurfaceAnim(Surface surf)\n</code></pre>"},{"location":"cog/cog_system/#getsurfaceanim","title":"GetSurfaceAnim","text":"<pre><code>GetSurfaceAnim(Surface surf) -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#surfaceanim","title":"SurfaceAnim","text":"<pre><code>SurfaceAnim(Surface surf, float speed, int flags) -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#getkeylen","title":"GetKeyLen","text":"<pre><code>GetKeyLen(Keyframe keyframe) -&gt; float\n</code></pre>"},{"location":"cog/cog_system/#loadtemplate","title":"LoadTemplate","text":"<pre><code>LoadTemplate(string templateName) -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#loadkeyframe","title":"LoadKeyframe","text":"<pre><code>LoadKeyframe(string keyFilename) -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#loadmodel","title":"LoadModel","text":"<pre><code>LoadModel(string modelFilename) -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#print","title":"Print","text":"<pre><code>Print(string value)\n</code></pre>"},{"location":"cog/cog_system/#printint","title":"PrintInt","text":"<pre><code>PrintInt(int value)\n</code></pre>"},{"location":"cog/cog_system/#printflex","title":"PrintFlex","text":"<pre><code>PrintFlex(float value)\n</code></pre>"},{"location":"cog/cog_system/#printvector","title":"PrintVector","text":"<pre><code>PrintVector(Vector vec)\n</code></pre>"},{"location":"cog/cog_system/#printhex","title":"printhex","text":"<pre><code>printhex(int value)\n</code></pre>"},{"location":"cog/cog_system/#vectoradd","title":"VectorAdd","text":"<pre><code>VectorAdd(Vector b, Vector a) -&gt; Vector\n</code></pre>"},{"location":"cog/cog_system/#vectorsub","title":"VectorSub","text":"<pre><code>VectorSub(Vector b, Vector a) -&gt; Vector\n</code></pre>"},{"location":"cog/cog_system/#vectordot","title":"VectorDot","text":"<pre><code>VectorDot(Vector a, Vector b) -&gt; float\n</code></pre>"},{"location":"cog/cog_system/#vectorcross","title":"VectorCross","text":"<pre><code>VectorCross(Vector a, Vector b) -&gt; Vector\n</code></pre>"},{"location":"cog/cog_system/#vectorset","title":"VectorSet","text":"<pre><code>VectorSet(float x, float y, float z) -&gt; Vector\n</code></pre>"},{"location":"cog/cog_system/#vectorlen","title":"VectorLen","text":"<pre><code>VectorLen(Vector vec) -&gt; float\n</code></pre>"},{"location":"cog/cog_system/#vectorscale","title":"VectorScale","text":"<pre><code>VectorScale(Vector a, float scalar) -&gt; Vector\n</code></pre>"},{"location":"cog/cog_system/#vectordist","title":"VectorDist","text":"<pre><code>VectorDist(Vector b, Vector a) -&gt; float\n</code></pre>"},{"location":"cog/cog_system/#vectorx","title":"VectorX","text":"<pre><code>VectorX(Vector vec) -&gt; float\n</code></pre>"},{"location":"cog/cog_system/#vectory","title":"VectorY","text":"<pre><code>VectorY(Vector vec) -&gt; float\n</code></pre>"},{"location":"cog/cog_system/#vectorz","title":"VectorZ","text":"<pre><code>VectorZ(Vector vec) -&gt; float\n</code></pre>"},{"location":"cog/cog_system/#vectornorm","title":"VectorNorm","text":"<pre><code>VectorNorm(Vector vec) -&gt; Vector\n</code></pre>"},{"location":"cog/cog_system/#vectorequal","title":"VectorEqual","text":"<pre><code>VectorEqual(Vector b, Vector a) -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#vectorrotate","title":"VectorRotate","text":"<pre><code>VectorRotate(Vector vec, Vector pyr) -&gt; Vector\n</code></pre>"},{"location":"cog/cog_system/#vectortransformtoorient","title":"VectorTransformToOrient","text":"<pre><code>VectorTransformToOrient(Thing thing, Vector vec) -&gt; Vector\n</code></pre>"},{"location":"cog/cog_system/#getsithmode","title":"GetSithMode","text":"<pre><code>GetSithMode() -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#getdifficulty","title":"GetDifficulty","text":"<pre><code>GetDifficulty() -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#setsubmodeflags","title":"SetSubModeFlags","text":"<pre><code>SetSubModeFlags(int value)\n</code></pre>"},{"location":"cog/cog_system/#getsubmodeflags","title":"GetSubModeFlags","text":"<pre><code>GetSubModeFlags() -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#clearsubmodeflags","title":"ClearSubModeFlags","text":"<pre><code>ClearSubModeFlags(int value)\n</code></pre>"},{"location":"cog/cog_system/#setdebugmodeflags","title":"SetDebugModeFlags","text":"<pre><code>SetDebugModeFlags(int value)\n</code></pre>"},{"location":"cog/cog_system/#getdebugmodeflags","title":"GetDebugModeFlags","text":"<pre><code>GetDebugModeFlags() -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#cleardebugmodeflags","title":"ClearDebugModeFlags","text":"<pre><code>ClearDebugModeFlags(int value)\n</code></pre>"},{"location":"cog/cog_system/#bitset","title":"BitSet","text":"<pre><code>BitSet(int flags, int mask) -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#bittest","title":"BitTest","text":"<pre><code>BitTest(int flags, int mask) -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#bitclear","title":"BitClear","text":"<pre><code>BitClear(int flags, int mask) -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#fireprojectile","title":"FireProjectile","text":"<p><pre><code>FireProjectile(Thing shooter, Template projectile, Sound fireSnd, int submode, Vector fireOffset, Vector fireError, float extra, int flags, float autoAimFovX, float autoAimFovZ) -&gt; Thing\n</code></pre> Creates and fires a projectile from the specified <code>shooter</code> using the provided <code>projectile</code> template, with additional parameters influencing the shot.</p> <p>Parameters:  - <code>shooter</code> -The game object which fires projectile.  - <code>projectile</code> - The template used for creating and shooting a projectile game object.  - <code>fireSnd</code> - Fire sound effect.  - <code>submode</code> - The <code>shooter</code> <code>puppet submode</code> number to play upon firing projectile.  - <code>aimError</code> -  Shot projectile aim error. Affected by <code>aimFov</code> and <code>aimMax</code> depending on the <code>flags</code> parameter.  - <code>scale</code> - The projectile properties scale multiplier. The <code>flags</code> parameter defines which projectile property is affected by this multiplier.  - <code>aimFov</code> - The aim field of view.  - <code>aimMax</code> - The projectile max aim.  - <code>flags</code>:     * 0x01  - Multiply projectile velocity with <code>scale</code> param.     * 0x02  - Multiply projectile impact damage with <code>scale</code> param.     * 0x04  - Multiply unknown projectile param with <code>scale</code> param.     * 0x08  - Multiply unknown projectile param with <code>scale</code> param.     * 0x10  - Burst fire up to 10 projectiles if shooter has set fire wait time. (Set by SetFireWait cog function)      * 0x20  - [Player] Apply aimFov and aimMax to aimError.     * 0x80  - [Player] Shoot projectile from the right hand of the player's 3D model (inrhand)     * 0x100 - [Player] Shoot projectile from the torso of the player's 3D model (intorso).               There is a bug for this flag and the rotation vector is not initialized which can crash the game.     * 0x200 - Add weapon fire effect. Note, this only works if shooter model has <code>inrhand</code> hierarchy hand node defined in it's model 3DO file.     For 250 ms engine switches the current weapon model with firing weapon model for weapons:       * pistol - weap_revolver_fire.3do       * tokarev - weap_tokarev_fire.3do       * mauser - weap_mauser_fire.3do       * simonov - weap_simonov_fire.3do       * submachine - weap_ppsh41_fire.3do       * shotgun - weap_toz34_fire.3do</p> <p>Return On success projectile object is returned, otherwise -1.</p>"},{"location":"cog/cog_system/#activateweapon","title":"ActivateWeapon","text":"<pre><code>ActivateWeapon(Thing thing, float timeToWait)\n</code></pre>"},{"location":"cog/cog_system/#deactivateweapon","title":"DeactivateWeapon","text":"<pre><code>DeactivateWeapon(Thing thing) -&gt; float\n</code></pre>"},{"location":"cog/cog_system/#deactivatecurweapon","title":"DeactivateCurWeapon","text":"<pre><code>DeactivateCurWeapon(Thing thing)\n</code></pre>"},{"location":"cog/cog_system/#setmountwait","title":"SetMountWait","text":"<pre><code>SetMountWait(Thing thing, float timeToWait)\n</code></pre>"},{"location":"cog/cog_system/#setfirewait","title":"SetFireWait","text":"<pre><code>SetFireWait(Thing thing, float waitTime)\n</code></pre>"},{"location":"cog/cog_system/#setaimwait","title":"SetAimWait","text":"<pre><code>SetAimWait(Thing thing, float timeToWait)\n</code></pre>"},{"location":"cog/cog_system/#selectweapon","title":"SelectWeapon","text":"<pre><code>SelectWeapon(Thing thing, int weaponID) -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#selectweaponwait","title":"SelectWeaponWait","text":"<pre><code>SelectWeaponWait(Thing thing, int weaponId) -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#deselectweapon","title":"DeselectWeapon","text":"<pre><code>DeselectWeapon(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#deselectweaponwait","title":"DeselectWeaponWait","text":"<pre><code>DeselectWeaponWait(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#setcurweapon","title":"SetCurWeapon","text":"<pre><code>SetCurWeapon(Thing thing, int weaponID)\n</code></pre>"},{"location":"cog/cog_system/#getcurweapon","title":"GetCurWeapon","text":"<pre><code>GetCurWeapon(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#setweaponmodel","title":"SetWeaponModel","text":"<pre><code>SetWeaponModel(Thing thing, int typeId)\n</code></pre>"},{"location":"cog/cog_system/#resetweaponmodel","title":"ResetWeaponModel","text":"<pre><code>ResetWeaponModel(Thing thing)\n</code></pre>"},{"location":"cog/cog_system/#loadholstermodel","title":"LoadHolsterModel","text":"<pre><code>LoadHolsterModel(int type, string modelFilename) -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#setholstermodel","title":"SetHolsterModel","text":"<pre><code>SetHolsterModel(Thing thing, int weaponId, int meshNum)\n</code></pre>"},{"location":"cog/cog_system/#resetholstermodel","title":"ResetHolsterModel","text":"<pre><code>ResetHolsterModel(Thing thing, int holsterNum)\n</code></pre>"},{"location":"cog/cog_system/#getlastpistol","title":"GetLastPistol","text":"<pre><code>GetLastPistol(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#getlastrifle","title":"GetLastRifle","text":"<pre><code>GetLastRifle(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#copyplayerholsters","title":"CopyPlayerHolsters","text":"<pre><code>CopyPlayerHolsters(Thing sourceThing, Thing destThing)\n</code></pre>"},{"location":"cog/cog_system/#sendmessage","title":"SendMessage","text":"<pre><code>SendMessage(cog dstCog, int msgType)\n</code></pre>"},{"location":"cog/cog_system/#sendmessageex","title":"SendMessageEx","text":"<pre><code>SendMessageEx(cog dstCog, int msg, int param0, int param1, int param2, int param3) -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#returnex","title":"ReturnEx","text":"<pre><code>ReturnEx(int returnValue)\n</code></pre>"},{"location":"cog/cog_system/#getparam","title":"GetParam","text":"<pre><code>GetParam(int idx) -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#setparam","title":"SetParam","text":"<pre><code>SetParam(int num, int val)\n</code></pre>"},{"location":"cog/cog_system/#setinvflags","title":"SetInvFlags","text":"<pre><code>SetInvFlags(Thing thing, int bin, int flags)\n</code></pre>"},{"location":"cog/cog_system/#setmapmodeflags","title":"SetMapModeFlags","text":"<pre><code>SetMapModeFlags(int value)\n</code></pre>"},{"location":"cog/cog_system/#getmapmodeflags","title":"GetMapModeFlags","text":"<pre><code>GetMapModeFlags() -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#clearmapmodeflags","title":"ClearMapModeFlags","text":"<pre><code>ClearMapModeFlags(int value)\n</code></pre>"},{"location":"cog/cog_system/#getmaterialcel","title":"GetMaterialCel","text":"<pre><code>GetMaterialCel(Material value) -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#setmaterialcel","title":"SetMaterialCel","text":"<pre><code>SetMaterialCel(Material mat, int celNum) -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#setcamerafocus","title":"SetCameraFocus","text":"<pre><code>SetCameraFocus(int camNum, Thing thing)\n</code></pre>"},{"location":"cog/cog_system/#getprimaryfocus","title":"GetPrimaryFocus","text":"<pre><code>GetPrimaryFocus(int camNum) -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#getsecondaryfocus","title":"GetSecondaryFocus","text":"<pre><code>GetSecondaryFocus(int camNum) -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#setcurrentcamera","title":"SetCurrentCamera","text":"<pre><code>SetCurrentCamera(int camNum)\n</code></pre>"},{"location":"cog/cog_system/#getcurrentcamera","title":"GetCurrentCamera","text":"<pre><code>GetCurrentCamera() -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#cyclecamera","title":"CycleCamera","text":"<pre><code>CycleCamera()\n</code></pre>"},{"location":"cog/cog_system/#setpovshake","title":"SetPOVShake","text":"<pre><code>SetPOVShake(Vector posOffset, Vector angleOffset, float posDelta, float angDelta)\n</code></pre>"},{"location":"cog/cog_system/#setcamerastateflags","title":"SetCameraStateFlags","text":"<pre><code>SetCameraStateFlags(int flags)\n</code></pre>"},{"location":"cog/cog_system/#getcamerastateflags","title":"GetCameraStateFlags","text":"<pre><code>GetCameraStateFlags() -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#setcamerasecondaryfocus","title":"SetCameraSecondaryFocus","text":"<pre><code>SetCameraSecondaryFocus(int camNum, Thing focus)\n</code></pre>"},{"location":"cog/cog_system/#heapnew","title":"HeapNew","text":"<pre><code>HeapNew(int size)\n</code></pre>"},{"location":"cog/cog_system/#heapset","title":"HeapSet","text":"<pre><code>HeapSet(int idx)\n</code></pre>"},{"location":"cog/cog_system/#heapget","title":"HeapGet","text":"<pre><code>HeapGet(int num) -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#heapfree","title":"HeapFree","text":"<pre><code>HeapFree()\n</code></pre>"},{"location":"cog/cog_system/#getselfcog","title":"GetSelfCog","text":"<pre><code>GetSelfCog() -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#getmastercog","title":"GetMasterCog","text":"<pre><code>GetMasterCog() -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#setmastercog","title":"SetMasterCog","text":"<pre><code>SetMasterCog(cog sithCog_g_pMasterCog)\n</code></pre>"},{"location":"cog/cog_system/#getcogbyindex","title":"GetCogByIndex","text":"<pre><code>GetCogByIndex(int idx) -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#ismulti","title":"IsMulti","text":"<pre><code>IsMulti() -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#isserver","title":"IsServer","text":"<pre><code>IsServer() -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#sendtrigger","title":"SendTrigger","text":"<pre><code>SendTrigger(Thing thing, int srcIdx, int param0, int param1, int param2, int param3)\n</code></pre>"},{"location":"cog/cog_system/#autosavegame","title":"AutoSavegame","text":"<pre><code>AutoSavegame()\n</code></pre>"},{"location":"cog/cog_system/#gethintsolved","title":"GetHintSolved","text":"<pre><code>GetHintSolved(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#sethintsolved","title":"SetHintSolved","text":"<pre><code>SetHintSolved(Thing thing)\n</code></pre>"},{"location":"cog/cog_system/#sethintunsolved","title":"SetHintUnsolved","text":"<pre><code>SetHintUnsolved(Thing thing)\n</code></pre>"},{"location":"cog/cog_system/#rand","title":"Rand","text":"<pre><code>Rand() -&gt; float\n</code></pre>"},{"location":"cog/cog_system/#randbetween","title":"RandBetween","text":"<pre><code>RandBetween(int min, int max) -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#randvec","title":"RandVec","text":"<pre><code>RandVec() -&gt; Vector\n</code></pre>"},{"location":"cog/cog_system/#round","title":"Round","text":"<pre><code>Round(float val) -&gt; float\n</code></pre>"},{"location":"cog/cog_system/#truncate","title":"Truncate","text":"<pre><code>Truncate(float val) -&gt; float\n</code></pre>"},{"location":"cog/cog_system/#abs","title":"Abs","text":"<pre><code>Abs(float val) -&gt; float\n</code></pre>"},{"location":"cog/cog_system/#pow","title":"Pow","text":"<pre><code>Pow(float base, float exp) -&gt; float\n</code></pre>"},{"location":"cog/cog_system/#sin","title":"Sin","text":"<pre><code>Sin(float angle) -&gt; float\n</code></pre>"},{"location":"cog/cog_system/#cos","title":"Cos","text":"<pre><code>Cos(float angle) -&gt; float\n</code></pre>"},{"location":"cog/cog_system/#arctan","title":"ArcTan","text":"<pre><code>ArcTan(float x, float y) -&gt; float\n</code></pre>"},{"location":"cog/cog_system/#getperformancelevel","title":"GetPerformanceLevel","text":"<pre><code>GetPerformanceLevel() -&gt; int\n</code></pre>"},{"location":"cog/cog_system/#islevelname","title":"IsLevelName","text":"<pre><code>IsLevelName(string name) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/","title":"Thing COG Functions","text":""},{"location":"cog/cog_thing/#function-list","title":"Function List","text":"<ul> <li>WaitForStop</li> <li>WaitForAnimStop</li> <li>StopThing</li> <li>DestroyThing</li> <li>GetThingHealth</li> <li>GetThingMaxHealth</li> <li>GetHealth</li> <li>HealThing</li> <li>GetThingLight</li> <li>SetThingLight</li> <li>ThingLight</li> <li>ThingLightAnim</li> <li>ThingFadeAnim</li> <li>CreateThing</li> <li>CreateThingAtPos</li> <li>CaptureThing</li> <li>ReleaseThing</li> <li>SetThingVel</li> <li>AddThingVel</li> <li>ApplyForce</li> <li>DetachThing</li> <li>GetAttachFlags</li> <li>GetThingAttachFlags</li> <li>AttachThingToSurf</li> <li>AttachThingToThing</li> <li>SetArmedMode</li> <li>SetThingFlags</li> <li>ClearThingFlags</li> <li>TeleportThing</li> <li>SetThingType</li> <li>SetCollideType</li> <li>SetHeadLightIntensity</li> <li>GetThingCurLightMode</li> <li>SetThingCurLightMode</li> <li>SetActorExtraSpeed</li> <li>SetThingPosEx</li> <li>SetThingMaxVel</li> <li>SetThingMaxAngVel</li> <li>SetThingJointAngle</li> <li>SetThingMaxHeadPitch</li> <li>SetThingMinHeadPitch</li> <li>GetThingMaxHeadPitch</li> <li>GetThingMinHeadPitch</li> <li>SetThingMaxHeadYaw</li> <li>GetThingMaxHeadYaw</li> <li>SetThingLVecPYR</li> <li>SetActorHeadPYR</li> <li>SetThingAirDrag</li> <li>SetThingMaxRotVel</li> <li>SetThingMaxHeadVel</li> <li>ResetThing</li> <li>MoveThing</li> <li>MoveThingToPos</li> <li>GetThingType</li> <li>IsThingMoving</li> <li>IsMoving</li> <li>GetCurFrame</li> <li>GetGoalFrame</li> <li>GetThingParent</li> <li>GetThingSector</li> <li>GetThingPos</li> <li>SetThingPos</li> <li>GetThingVel</li> <li>GetThingUVec</li> <li>GetThingLVec</li> <li>GetThingRVec</li> <li>GetThingFlags</li> <li>GetCollideType</li> <li>GetHeadLightIntensity</li> <li>IsThingVisible</li> <li>GetThingGuid</li> <li>GetGuidThing</li> <li>GetThingMaxVel</li> <li>GetThingMaxAngVel</li> <li>GetThingJointAngle</li> <li>InterpolatePYR</li> <li>GetThingLVecPYR</li> <li>GetActorHeadPYR</li> <li>GetThingJointPos</li> <li>IsThingModelName</li> <li>GetThingMaxRotVel</li> <li>GetThingMaxHeadVel</li> <li>CopyOrient</li> <li>CopyOrientAndPos</li> <li>GetThingInsertOffset</li> <li>SetThingInsertOffset</li> <li>GetThingEyeOffset</li> <li>SetThingPulse</li> <li>SetThingTimer</li> <li>GetInv</li> <li>SetInv</li> <li>ChangeInv</li> <li>GetInvCog</li> <li>GetInvMin</li> <li>GetInvMax</li> <li>PlayKey</li> <li>PlayKeyEx</li> <li>StopKey</li> <li>PauseKey</li> <li>ResumeKey</li> <li>SetThingModel</li> <li>GetThingModel</li> <li>PlayMode</li> <li>StopMode</li> <li>SynchMode</li> <li>IsModePlaying</li> <li>PauseMode</li> <li>ResumeMode</li> <li>TrackToMode</li> <li>WaitMode</li> <li>GetMajorMode</li> <li>FirstThingInSector</li> <li>NextThingInSector</li> <li>PrevThingInSector</li> <li>MoveToFrame</li> <li>SkipToFrame</li> <li>JumpToFrame</li> <li>PathMovePause</li> <li>PathMoveResume</li> <li>Rotate</li> <li>RotatePivot</li> <li>RotateToPYR</li> <li>GetThingTemplate</li> <li>DamageThing</li> <li>SetLifeLeft</li> <li>GetLifeLeft</li> <li>SetThingThrust</li> <li>GetThingThrust</li> <li>SetThingHealth</li> <li>SetHealth</li> <li>AmputateJoint</li> <li>SetActorWeapon</li> <li>GetActorWeapon</li> <li>GetPhysicsFlags</li> <li>SetPhysicsFlags</li> <li>ClearPhysicsFlags</li> <li>ParseArg</li> <li>GetThingRotVel</li> <li>SetThingRotVel</li> <li>GetThingRotThrust</li> <li>SetThingRotThrust</li> <li>SetThingLook</li> <li>SetThingHeadLookPos</li> <li>SetThingHeadLookThing</li> <li>IsThingCrouching</li> <li>IsCrouching</li> <li>GetThingClassCog</li> <li>SetThingClassCog</li> <li>GetThingCaptureCog</li> <li>SetThingCaptureCog</li> <li>GetThingRespawn</li> <li>GetThingSignature</li> <li>SetThingAttachFlags</li> <li>ClearThingAttachFlags</li> <li>GetParticleSize</li> <li>SetParticleSize</li> <li>GetParticleGrowthSpeed</li> <li>SetParticleGrowthSpeed</li> <li>GetParticleTimeoutRate</li> <li>SetParticleTimeoutRate</li> <li>GetTypeFlags</li> <li>SetTypeFlags</li> <li>ClearTypeFlags</li> <li>GetActorFlags</li> <li>SetActorFlags</li> <li>ClearActorFlags</li> <li>GetWeaponFlags</li> <li>SetWeaponFlags</li> <li>ClearWeaponFlags</li> <li>GetExplosionFlags</li> <li>SetExplosionFlags</li> <li>ClearExplosionFlags</li> <li>GetItemFlags</li> <li>SetItemFlags</li> <li>ClearItemFlags</li> <li>GetParticleFlags</li> <li>SetParticleFlags</li> <li>ClearParticleFlags</li> <li>TakeItem</li> <li>HasLOS</li> <li>GetThingFireOffset</li> <li>SetThingFireOffset</li> <li>GetThingUserData</li> <li>SetThingUserData</li> <li>GetThingCollideSize</li> <li>SetThingCollideSize</li> <li>GetThingMoveSize</li> <li>SetThingMoveSize</li> <li>GetThingMass</li> <li>SetThingMass</li> <li>SyncThingPos</li> <li>SyncThingAttachment</li> <li>SyncThingState</li> <li>AttachThingToThingEx</li> <li>GetThingAttachedThing</li> <li>GetMeshByName</li> <li>GetNodeByName</li> <li>AttachThingToThingMesh</li> <li>DetachThingMesh</li> <li>SetThingMesh</li> <li>RestoreThingMesh</li> <li>GetThingAlpha</li> <li>SetThingAlpha</li> <li>GetCameraFOV</li> <li>SetCameraFOV</li> <li>ResetCameraFOV</li> <li>SetCameraLookInterp</li> <li>SetCameraPosInterp</li> <li>SetCameraInterpSpeed</li> <li>SetCameraPosition</li> <li>AnimateSpriteSize</li> <li>GetCameraPosition</li> <li>SetCameraFadeThing</li> <li>SetExtCamOffset</li> <li>SetExtCamOffsetToThing</li> <li>SetExtCamLookOffsetToThing</li> <li>SetExtCamLookOffset</li> <li>RestoreExtCam</li> <li>PlayForceMoveMode</li> <li>IsThingAutoAiming</li> <li>GetMoveStatus</li> <li>CreateLaser</li> <li>CreateLightning</li> <li>MakeFairyDust</li> <li>MakeFairyDustDeluxe</li> <li>SetPuppetModeFPS</li> <li>SetMoveMode</li> <li>CheckFloorDistance</li> <li>CheckPathToPoint</li> <li>SetThingStateChange</li> <li>CreatePolylineThing</li> <li>StartQuetzAnim</li> <li>BoardVehicle</li> <li>FadeInTrack</li> <li>IsGhostVisible</li> <li>MakeCamera2LikeCamera1</li> </ul>"},{"location":"cog/cog_thing/#waitforstop","title":"WaitForStop","text":"<pre><code>WaitForStop(Thing thing)\n</code></pre>"},{"location":"cog/cog_thing/#waitforanimstop","title":"WaitForAnimStop","text":"<pre><code>WaitForAnimStop(int animID)\n</code></pre>"},{"location":"cog/cog_thing/#stopthing","title":"StopThing","text":"<pre><code>StopThing(Thing thing)\n</code></pre>"},{"location":"cog/cog_thing/#destroything","title":"DestroyThing","text":"<pre><code>DestroyThing(Thing thing)\n</code></pre>"},{"location":"cog/cog_thing/#getthinghealth","title":"GetThingHealth","text":"<pre><code>GetThingHealth(Thing thing) -&gt; float\n</code></pre>"},{"location":"cog/cog_thing/#getthingmaxhealth","title":"GetThingMaxHealth","text":"<pre><code>GetThingMaxHealth(Thing thing) -&gt; float\n</code></pre>"},{"location":"cog/cog_thing/#gethealth","title":"GetHealth","text":"<pre><code>GetHealth(Thing thing) -&gt; float\n</code></pre>"},{"location":"cog/cog_thing/#healthing","title":"HealThing","text":"<pre><code>HealThing(Thing thing, float health)\n</code></pre>"},{"location":"cog/cog_thing/#getthinglight","title":"GetThingLight","text":"<pre><code>GetThingLight(Thing thing) -&gt; Vector\n</code></pre>"},{"location":"cog/cog_thing/#setthinglight","title":"SetThingLight","text":"<pre><code>SetThingLight(Thing thing, Vector value, float maxRadius, float timeDelta)\n</code></pre>"},{"location":"cog/cog_thing/#thinglight","title":"ThingLight","text":"<pre><code>ThingLight(Thing thing, Vector value, float maxRadius, float timeDelta)\n</code></pre>"},{"location":"cog/cog_thing/#thinglightanim","title":"ThingLightAnim","text":"<pre><code>ThingLightAnim(Thing thing, Vector startColor, float startRadius, Vector value, float endRadius, float speed) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#thingfadeanim","title":"ThingFadeAnim","text":"<pre><code>ThingFadeAnim(Thing thing, float startAlpha, float endAlpha, float timeDelta, int bLoop) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#creatething","title":"CreateThing","text":"<pre><code>CreateThing(Template template, Thing refThing) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#createthingatpos","title":"CreateThingAtPos","text":"<pre><code>CreateThingAtPos(Template template, Sector sector, Vector pos, Vector pyr) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#capturething","title":"CaptureThing","text":"<pre><code>CaptureThing(Thing thing)\n</code></pre>"},{"location":"cog/cog_thing/#releasething","title":"ReleaseThing","text":"<pre><code>ReleaseThing(Thing thing)\n</code></pre>"},{"location":"cog/cog_thing/#setthingvel","title":"SetThingVel","text":"<pre><code>SetThingVel(Thing thing, Vector vel)\n</code></pre>"},{"location":"cog/cog_thing/#addthingvel","title":"AddThingVel","text":"<pre><code>AddThingVel(Thing thing, Vector vel)\n</code></pre>"},{"location":"cog/cog_thing/#applyforce","title":"ApplyForce","text":"<pre><code>ApplyForce(Thing thing, Vector vec)\n</code></pre>"},{"location":"cog/cog_thing/#detachthing","title":"DetachThing","text":"<pre><code>DetachThing(Thing thing)\n</code></pre>"},{"location":"cog/cog_thing/#getattachflags","title":"GetAttachFlags","text":"<pre><code>GetAttachFlags(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#getthingattachflags","title":"GetThingAttachFlags","text":"<pre><code>GetThingAttachFlags(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#attachthingtosurf","title":"AttachThingToSurf","text":"<pre><code>AttachThingToSurf(Thing thing, Surface surf)\n</code></pre>"},{"location":"cog/cog_thing/#attachthingtothing","title":"AttachThingToThing","text":"<pre><code>AttachThingToThing(Thing thing, Thing attachThing)\n</code></pre>"},{"location":"cog/cog_thing/#setarmedmode","title":"SetArmedMode","text":"<p><pre><code>SetArmedMode(Thing thing, int armedMode)\n</code></pre> Sets puppet <code>armed mode</code> for <code>thing</code> object. The object needs to have both a model and puppet object assigned.</p> <p>Parameters:  * <code>thing</code> - The game object to set new armed mode.  * armedMode - The <code>puppet armed mode</code> number (0-7).</p>"},{"location":"cog/cog_thing/#setthingflags","title":"SetThingFlags","text":"<pre><code>SetThingFlags(Thing thing, int flags)\n</code></pre>"},{"location":"cog/cog_thing/#clearthingflags","title":"ClearThingFlags","text":"<pre><code>ClearThingFlags(Thing thing, int flags)\n</code></pre>"},{"location":"cog/cog_thing/#teleportthing","title":"TeleportThing","text":"<pre><code>TeleportThing(Thing destThing, Thing srcThing)\n</code></pre>"},{"location":"cog/cog_thing/#setthingtype","title":"SetThingType","text":"<pre><code>SetThingType(Thing thing, int type)\n</code></pre>"},{"location":"cog/cog_thing/#setcollidetype","title":"SetCollideType","text":"<pre><code>SetCollideType(Thing thing, int type)\n</code></pre>"},{"location":"cog/cog_thing/#setheadlightintensity","title":"SetHeadLightIntensity","text":"<pre><code>SetHeadLightIntensity(Thing thing, Vector color) -&gt; Vector\n</code></pre>"},{"location":"cog/cog_thing/#getthingcurlightmode","title":"GetThingCurLightMode","text":"<pre><code>GetThingCurLightMode(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#setthingcurlightmode","title":"SetThingCurLightMode","text":"<pre><code>SetThingCurLightMode(Thing thing, int mode)\n</code></pre>"},{"location":"cog/cog_thing/#setactorextraspeed","title":"SetActorExtraSpeed","text":"<pre><code>SetActorExtraSpeed(Thing thing, float speed)\n</code></pre>"},{"location":"cog/cog_thing/#setthingposex","title":"SetThingPosEx","text":"<pre><code>SetThingPosEx(Thing thing, Vector vecPos, Sector sector) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#setthingmaxvel","title":"SetThingMaxVel","text":"<pre><code>SetThingMaxVel(Thing thing, float maxSpeed)\n</code></pre>"},{"location":"cog/cog_thing/#setthingmaxangvel","title":"SetThingMaxAngVel","text":"<pre><code>SetThingMaxAngVel(Thing thing, float maxRotSpeed)\n</code></pre>"},{"location":"cog/cog_thing/#setthingjointangle","title":"SetThingJointAngle","text":"<pre><code>SetThingJointAngle(Thing thing, int jointNum, float angle)\n</code></pre>"},{"location":"cog/cog_thing/#setthingmaxheadpitch","title":"SetThingMaxHeadPitch","text":"<pre><code>SetThingMaxHeadPitch(Thing thing, float maxPitch) -&gt; float\n</code></pre>"},{"location":"cog/cog_thing/#setthingminheadpitch","title":"SetThingMinHeadPitch","text":"<pre><code>SetThingMinHeadPitch(Thing thing, float minPitch) -&gt; float\n</code></pre>"},{"location":"cog/cog_thing/#getthingmaxheadpitch","title":"GetThingMaxHeadPitch","text":"<pre><code>GetThingMaxHeadPitch(Thing thing) -&gt; float\n</code></pre>"},{"location":"cog/cog_thing/#getthingminheadpitch","title":"GetThingMinHeadPitch","text":"<pre><code>GetThingMinHeadPitch(Thing thing) -&gt; float\n</code></pre>"},{"location":"cog/cog_thing/#setthingmaxheadyaw","title":"SetThingMaxHeadYaw","text":"<pre><code>SetThingMaxHeadYaw(Thing thing, float maxYaw) -&gt; float\n</code></pre>"},{"location":"cog/cog_thing/#getthingmaxheadyaw","title":"GetThingMaxHeadYaw","text":"<pre><code>GetThingMaxHeadYaw(Thing thing) -&gt; float\n</code></pre>"},{"location":"cog/cog_thing/#setthinglvecpyr","title":"SetThingLVecPYR","text":"<pre><code>SetThingLVecPYR(Thing thing, Vector lvec)\n</code></pre>"},{"location":"cog/cog_thing/#setactorheadpyr","title":"SetActorHeadPYR","text":"<pre><code>SetActorHeadPYR(Thing thing, Vector pyr)\n</code></pre>"},{"location":"cog/cog_thing/#setthingairdrag","title":"SetThingAirDrag","text":"<pre><code>SetThingAirDrag(Thing thing, float drag)\n</code></pre>"},{"location":"cog/cog_thing/#setthingmaxrotvel","title":"SetThingMaxRotVel","text":"<pre><code>SetThingMaxRotVel(Thing thing, float vel)\n</code></pre>"},{"location":"cog/cog_thing/#setthingmaxheadvel","title":"SetThingMaxHeadVel","text":"<pre><code>SetThingMaxHeadVel(Thing thing, float vel)\n</code></pre>"},{"location":"cog/cog_thing/#resetthing","title":"ResetThing","text":"<pre><code>ResetThing(Thing thing)\n</code></pre>"},{"location":"cog/cog_thing/#movething","title":"MoveThing","text":"<pre><code>MoveThing(Thing thing, Vector vecDirection, float moveDist, float timeDelta) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#movethingtopos","title":"MoveThingToPos","text":"<pre><code>MoveThingToPos(Thing thing, Vector pos, float time) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#getthingtype","title":"GetThingType","text":"<pre><code>GetThingType(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#isthingmoving","title":"IsThingMoving","text":"<pre><code>IsThingMoving(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#ismoving","title":"IsMoving","text":"<pre><code>IsMoving(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#getcurframe","title":"GetCurFrame","text":"<pre><code>GetCurFrame(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#getgoalframe","title":"GetGoalFrame","text":"<pre><code>GetGoalFrame(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#getthingparent","title":"GetThingParent","text":"<pre><code>GetThingParent(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#getthingsector","title":"GetThingSector","text":"<pre><code>GetThingSector(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#getthingpos","title":"GetThingPos","text":"<pre><code>GetThingPos(Thing thing) -&gt; Vector\n</code></pre>"},{"location":"cog/cog_thing/#setthingpos","title":"SetThingPos","text":"<pre><code>SetThingPos(Thing thing, Vector newPos) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#getthingvel","title":"GetThingVel","text":"<pre><code>GetThingVel(Thing thing) -&gt; Vector\n</code></pre>"},{"location":"cog/cog_thing/#getthinguvec","title":"GetThingUVec","text":"<pre><code>GetThingUVec(Thing thing) -&gt; Vector\n</code></pre>"},{"location":"cog/cog_thing/#getthinglvec","title":"GetThingLVec","text":"<pre><code>GetThingLVec(Thing thing) -&gt; Vector\n</code></pre>"},{"location":"cog/cog_thing/#getthingrvec","title":"GetThingRVec","text":"<pre><code>GetThingRVec(Thing thing) -&gt; Vector\n</code></pre>"},{"location":"cog/cog_thing/#getthingflags","title":"GetThingFlags","text":"<pre><code>GetThingFlags(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#getcollidetype","title":"GetCollideType","text":"<pre><code>GetCollideType(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#getheadlightintensity","title":"GetHeadLightIntensity","text":"<pre><code>GetHeadLightIntensity(Thing thing, Vector color) -&gt; Vector\n</code></pre>"},{"location":"cog/cog_thing/#isthingvisible","title":"IsThingVisible","text":"<pre><code>IsThingVisible(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#getthingguid","title":"GetThingGuid","text":"<pre><code>GetThingGuid(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#getguidthing","title":"GetGuidThing","text":"<pre><code>GetGuidThing(int guid) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#getthingmaxvel","title":"GetThingMaxVel","text":"<pre><code>GetThingMaxVel(Thing thing) -&gt; float\n</code></pre>"},{"location":"cog/cog_thing/#getthingmaxangvel","title":"GetThingMaxAngVel","text":"<pre><code>GetThingMaxAngVel(Thing thing) -&gt; float\n</code></pre>"},{"location":"cog/cog_thing/#getthingjointangle","title":"GetThingJointAngle","text":"<pre><code>GetThingJointAngle(Thing thing, int jointNum) -&gt; float\n</code></pre>"},{"location":"cog/cog_thing/#interpolatepyr","title":"InterpolatePYR","text":"<pre><code>InterpolatePYR(Vector axisX, Vector axisY, Vector axisZ, float angle) -&gt; Vector\n</code></pre>"},{"location":"cog/cog_thing/#getthinglvecpyr","title":"GetThingLVecPYR","text":"<pre><code>GetThingLVecPYR(Thing thing) -&gt; Vector\n</code></pre>"},{"location":"cog/cog_thing/#getactorheadpyr","title":"GetActorHeadPYR","text":"<pre><code>GetActorHeadPYR(Thing thing) -&gt; Vector\n</code></pre>"},{"location":"cog/cog_thing/#getthingjointpos","title":"GetThingJointPos","text":"<pre><code>GetThingJointPos(Thing thing, int jointNum) -&gt; Vector\n</code></pre>"},{"location":"cog/cog_thing/#isthingmodelname","title":"IsThingModelName","text":"<pre><code>IsThingModelName(Thing thing, string modelName) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#getthingmaxrotvel","title":"GetThingMaxRotVel","text":"<pre><code>GetThingMaxRotVel(Thing thing) -&gt; float\n</code></pre>"},{"location":"cog/cog_thing/#getthingmaxheadvel","title":"GetThingMaxHeadVel","text":"<pre><code>GetThingMaxHeadVel(Thing thing) -&gt; float\n</code></pre>"},{"location":"cog/cog_thing/#copyorient","title":"CopyOrient","text":"<pre><code>CopyOrient(Thing srcThing, Thing destThing)\n</code></pre>"},{"location":"cog/cog_thing/#copyorientandpos","title":"CopyOrientAndPos","text":"<pre><code>CopyOrientAndPos(Thing srcThing, Thing dstThing)\n</code></pre>"},{"location":"cog/cog_thing/#getthinginsertoffset","title":"GetThingInsertOffset","text":"<pre><code>GetThingInsertOffset(Thing thing) -&gt; Vector\n</code></pre>"},{"location":"cog/cog_thing/#setthinginsertoffset","title":"SetThingInsertOffset","text":"<pre><code>SetThingInsertOffset(Thing thing, Vector offset) -&gt; Vector\n</code></pre>"},{"location":"cog/cog_thing/#getthingeyeoffset","title":"GetThingEyeOffset","text":"<pre><code>GetThingEyeOffset(Thing thing) -&gt; Vector\n</code></pre>"},{"location":"cog/cog_thing/#setthingpulse","title":"SetThingPulse","text":"<pre><code>SetThingPulse(Thing thing, float secPulse)\n</code></pre>"},{"location":"cog/cog_thing/#setthingtimer","title":"SetThingTimer","text":"<pre><code>SetThingTimer(Thing thing, float secTimer)\n</code></pre>"},{"location":"cog/cog_thing/#getinv","title":"GetInv","text":"<pre><code>GetInv(Thing thing, int typeId) -&gt; float\n</code></pre>"},{"location":"cog/cog_thing/#setinv","title":"SetInv","text":"<pre><code>SetInv(Thing thing, int typeId, float amount)\n</code></pre>"},{"location":"cog/cog_thing/#changeinv","title":"ChangeInv","text":"<pre><code>ChangeInv(Thing thing, int typeId, float amount) -&gt; float\n</code></pre>"},{"location":"cog/cog_thing/#getinvcog","title":"GetInvCog","text":"<pre><code>GetInvCog(Thing thing, int typeId) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#getinvmin","title":"GetInvMin","text":"<pre><code>GetInvMin(Thing thing, int bin) -&gt; float\n</code></pre>"},{"location":"cog/cog_thing/#getinvmax","title":"GetInvMax","text":"<pre><code>GetInvMax(Thing thing, int bin) -&gt; float\n</code></pre>"},{"location":"cog/cog_thing/#playkey","title":"PlayKey","text":"<p><pre><code>PlayKey(Thing thing, Keyframe key, int lowPriority, int playFlags, int bWait) -&gt; int\n</code></pre> Plays puppet <code>key</code> animation for <code>thing</code> object. The object needs to have both a model and puppet object assigned.</p> <p>Parameters:  * <code>thing</code> -  The game object to play the <code>key</code> animation. The object has to have model and puppet set.  * <code>key</code> - The keyframe animation to play.  * <code>lowPriority</code>- The low-priority value of puppet animated joints with low priority.   The high priority is set to <code>lowPriority</code> + 2.  * <code>playFlags</code> - The puppet track flags.  * <code>bWait</code> -  If 1 - True wait for the animation to finish playing.</p> <p>Return   Returns the track number where the <code>key</code> is being played.</p>"},{"location":"cog/cog_thing/#playkeyex","title":"PlayKeyEx","text":"<p><pre><code>PlayKeyEx(Thing thing, Keyframe key, int lowPriority, int highPriority, int playFlags, int bWait) -&gt; int\n</code></pre> Plays puppet <code>key</code> animation for <code>thing</code> object. The object needs to have both a model and puppet object assigned.</p> <p>Parameters:  * <code>thing</code> -  The game object to play the <code>key</code> animation.  * <code>key</code> - The keyframe animation to play.  * <code>lowPriority</code>- The low-priority value of puppet animated joints with low priority.  * <code>highPriority</code>- The heigh-priority value of puppet animated joints with high priority.  * <code>playFlags</code> - The puppet track flags.  * <code>bWait</code> -  If 1 - True wait for the animation to finish playing.</p> <p>Return   Returns the track number where the <code>key</code> is being played.</p>"},{"location":"cog/cog_thing/#stopkey","title":"StopKey","text":"<p><pre><code>StopKey(Thing thing, int trackNum, float fadeTime)\n</code></pre> Stops the playback of the animation track for the <code>thing</code> object.</p> <p>Parameters:  * <code>thing</code> - The game object to stop the <code>track</code> animation. The object has to have model and puppet set.  * <code>trackNum</code> - Puppet track number to stop playing.  * <code>fadeTime</code> - Animation stop fade-out time in seconds. Must be greater than or equal to 0.</p>"},{"location":"cog/cog_thing/#pausekey","title":"PauseKey","text":"<p><pre><code>PauseKey(Thing thing, int trackNum) -&gt; int\n</code></pre> Pauses <code>thing</code>'s puppet track animation.</p> <p>Parameters:  * <code>thing</code> - The game object to pause the <code>track</code> animation.  * <code>trackNum</code> - Puppet track number to pause playing.</p> <p>Return   On success 1 is returned, otherwise -1.</p>"},{"location":"cog/cog_thing/#resumekey","title":"ResumeKey","text":"<p><pre><code>ResumeKey(Thing thing, int trackNum) -&gt; int\n</code></pre> Resumes paused <code>thing</code> puppet <code>track</code> animation.</p> <p>Parameters:  * <code>thing</code> - The game object to resume the <code>track</code> animation.  * <code>trackNum</code> - Puppet track number to resume playing.</p> <p>Return   On success 1 is returned, otherwise -1.</p>"},{"location":"cog/cog_thing/#setthingmodel","title":"SetThingModel","text":"<pre><code>SetThingModel(Thing thing, Model model) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#getthingmodel","title":"GetThingModel","text":"<pre><code>GetThingModel(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#playmode","title":"PlayMode","text":"<p><pre><code>PlayMode(Thing thing, int submode, int bWait) -&gt; int\n</code></pre> Plays puppet submode animation for <code>thing</code> object. The object needs to have both a model and puppet object assigned.</p> <p>Parameters:  * <code>thing</code> - The game object to play the <code>submode</code> track.  * <code>submode</code>- The puppet submode number to play.  * <code>bWait</code> - If 1 - True wait for the submode animation to finish playing.</p> <p>Return   Returns the track number where the <code>submode</code> animation is being played.</p>"},{"location":"cog/cog_thing/#stopmode","title":"StopMode","text":"<p><pre><code>StopMode(Thing thing, int submode, float fadeTime)\n</code></pre> Stops playing <code>puppet submode</code> track for <code>thing</code> object.</p> <p>Parameters:  * <code>thing</code> - The game object to stop the <code>submode</code> track.  * <code>submode</code> - The puppet submode number to stop playing.   * <code>fadeTime</code> - Animation stop fade-out time in seconds. Must be greater than or equal to 0.</p>"},{"location":"cog/cog_thing/#synchmode","title":"SynchMode","text":"<p><pre><code>SynchMode(Thing thing, int oldMode, int newMode, float unknown/unused, int bReverse)\n</code></pre> Synchronizes puppet submode track from old to new for <code>thing</code> object. That is, stops playing <code>old</code> submode track and starts playing the <code>new</code> submode track at the same animation frame where the <code>old</code> was stopped.</p> <p>Synchronizes the puppet <code>submode</code> track track from the old mode to the new mode for the <code>thing</code> object. This stops playing the old <code>submode</code> track track and starts playing the new <code>submode</code> track track from the same animation frame where the old track was stopped.</p> <p>Parameters:  * <code>thing</code> - The game object to play the <code>submode</code> track.  * <code>oldMode</code> - The puppet submode number to sync from.  * <code>newMode</code> - The puppet submode number to sync to.  * <code>unused</code> - Not used  * <code>bReversed</code></p>"},{"location":"cog/cog_thing/#ismodeplaying","title":"IsModePlaying","text":"<p><pre><code>IsModePlaying(Thing thing, int submode) -&gt; int\n</code></pre> Checks if <code>puppet submode</code> track is playing at the moment for the <code>thing</code>.</p> <p>Parameters:  * <code>thing</code> - The game object to check the <code>submode</code> track. The object has to have model and puppet set.  * <code>submode</code> - The puppet submode number to check.</p> <p>Return   Returns 0 if submode track is not playing, 1 if submode track is playing and 2 if submode track is paused. On error -1 is returned.</p>"},{"location":"cog/cog_thing/#pausemode","title":"PauseMode","text":"<p><pre><code>PauseMode(Thing thing, int submode) -&gt; int\n</code></pre> Pauses the <code>puppet submode</code> track for <code>thing</code>.</p> <p>Parameters:  * <code>thing</code> - The game object to pause the <code>submode</code> track. The object has to have model and puppet set.  * <code>submode</code> - The puppet submode number to pause playing.</p> <p>Return   Returns 0 if submode track is not playing, 1 if submode track was paused and 2 if submode track is already paused. On error -1 is returned.</p>"},{"location":"cog/cog_thing/#resumemode","title":"ResumeMode","text":"<p><pre><code>ResumeMode(Thing thing, int submode) -&gt; int\n</code></pre> Resumes playing <code>puppet submode</code> track animation for <code>thing</code> object.</p> <p>Parameters:  * <code>thing</code> - The game object to resume playing the <code>submode</code> track. * <code>submode</code> - The puppet submode number to resume playing.</p> <p>Return    - 0 if submode track is not playing    - 1 if submode track is resumed to play    - 2 if submode track is not paused</p> <p>On error -1 is returned.</p>"},{"location":"cog/cog_thing/#tracktomode","title":"TrackToMode","text":"<p><pre><code>TrackToMode(Thing thing, int trackNum) -&gt; int\n</code></pre> Returns the <code>puppet submode</code> number of the <code>thing</code> object for the specified track number.</p> <p>Parameters:  * <code>thing</code> - Playing track number to retrieve <code>submode</code>.  * <code>trackNum</code> - Track number of the playing track from which to retrieve the <code>submode</code>.</p> <p>Return   On success <code>puppet submode</code> number is returned.   On error -1 is returned e.g. invalid <code>track</code> number.</p>"},{"location":"cog/cog_thing/#waitmode","title":"WaitMode","text":"<p><pre><code>WaitMode(Thing thing, int submode) -&gt; int\n</code></pre> Waits for the <code>puppet submode</code> track to finish playing.</p> <p>Parameters:  * <code>thing</code> - The game object for which to wait until the track has finished playing.  * <code>submode</code> - The puppet submode number.</p> <p>Return   If <code>submode</code> is playing 1 is returned, otherwise 0.   On error -1 is returned.</p>"},{"location":"cog/cog_thing/#getmajormode","title":"GetMajorMode","text":"<p><pre><code>GetMajorMode(Thing thing) -&gt; int\n</code></pre> Returns the current <code>major mode</code> for the <code>object</code>'s puppet.</p> <p>Parameters:  * <code>thing</code> - The game object to retrieve the current major mode. The object has to have model and puppet set.</p> <p>Return   On success current major mode number is returned. On error -1 is returned.</p>"},{"location":"cog/cog_thing/#firstthinginsector","title":"FirstThingInSector","text":"<pre><code>FirstThingInSector(Sector thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#nextthinginsector","title":"NextThingInSector","text":"<pre><code>NextThingInSector(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#prevthinginsector","title":"PrevThingInSector","text":"<pre><code>PrevThingInSector(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#movetoframe","title":"MoveToFrame","text":"<pre><code>MoveToFrame(Thing thing, int frame, float speed)\n</code></pre>"},{"location":"cog/cog_thing/#skiptoframe","title":"SkipToFrame","text":"<pre><code>SkipToFrame(Thing thing, int frame, float speed)\n</code></pre>"},{"location":"cog/cog_thing/#jumptoframe","title":"JumpToFrame","text":"<pre><code>JumpToFrame(Thing thing, int frame, Sector sector)\n</code></pre>"},{"location":"cog/cog_thing/#pathmovepause","title":"PathMovePause","text":"<pre><code>PathMovePause(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#pathmoveresume","title":"PathMoveResume","text":"<pre><code>PathMoveResume(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#rotate","title":"Rotate","text":"<pre><code>Rotate(Thing thing, float degrees, int axis, float rotTime)\n</code></pre>"},{"location":"cog/cog_thing/#rotatepivot","title":"RotatePivot","text":"<pre><code>RotatePivot(Thing thing, int frame, float v7)\n</code></pre>"},{"location":"cog/cog_thing/#rotatetopyr","title":"RotateToPYR","text":"<pre><code>RotateToPYR(Thing thing, Vector pyr, float time)\n</code></pre>"},{"location":"cog/cog_thing/#getthingtemplate","title":"GetThingTemplate","text":"<pre><code>GetThingTemplate(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#damagething","title":"DamageThing","text":"<p><pre><code>DamageThing(Thing victim, float damage, int damageclass, Thing source) -&gt; float\n</code></pre> Damages <code>victim</code> game object.</p> <p>Parameters:  * <code>victim</code> - The game object to damage.  * <code>damage</code> - The amount of damage to apply to <code>victim</code>.  * <code>damageclass</code> - The damage class type to use for damage.  * <code>source</code> - The game object that inflicted the damage.</p> <p>Return   Returns the amount of actual damage applied to <code>victim</code>.</p>"},{"location":"cog/cog_thing/#setlifeleft","title":"SetLifeLeft","text":"<p><pre><code>SetLifeLeft(Thing thing, float secLeft)\n</code></pre> Sets the time to live for a game object.</p> <p>Parameters:  * <code>thing</code> - The game object whose life left is being set.  * <code>secLeft</code> - The number of seconds the object will live for.</p>"},{"location":"cog/cog_thing/#getlifeleft","title":"GetLifeLeft","text":"<p><pre><code>GetLifeLeft(Thing thing) -&gt; float\n</code></pre> Gets the remaining time to live for a game object.</p> <p>Parameters:  * <code>thing</code> - The game object whose remaining life time is being retrieved.</p> <p>Return The number of seconds the object has left to live.</p>"},{"location":"cog/cog_thing/#setthingthrust","title":"SetThingThrust","text":"<pre><code>SetThingThrust(Thing thing, Vector thrust) -&gt; Vector\n</code></pre>"},{"location":"cog/cog_thing/#getthingthrust","title":"GetThingThrust","text":"<pre><code>GetThingThrust(Thing thing) -&gt; Vector\n</code></pre>"},{"location":"cog/cog_thing/#setthinghealth","title":"SetThingHealth","text":"<pre><code>SetThingHealth(Thing thing, float health)\n</code></pre>"},{"location":"cog/cog_thing/#sethealth","title":"SetHealth","text":"<pre><code>SetHealth(Thing thing, float health)\n</code></pre>"},{"location":"cog/cog_thing/#amputatejoint","title":"AmputateJoint","text":"<pre><code>AmputateJoint(Thing thing, int joint)\n</code></pre>"},{"location":"cog/cog_thing/#setactorweapon","title":"SetActorWeapon","text":"<pre><code>SetActorWeapon(Thing actor, Template weapon)\n</code></pre>"},{"location":"cog/cog_thing/#getactorweapon","title":"GetActorWeapon","text":"<pre><code>GetActorWeapon(Thing actor) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#getphysicsflags","title":"GetPhysicsFlags","text":"<pre><code>GetPhysicsFlags(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#setphysicsflags","title":"SetPhysicsFlags","text":"<pre><code>SetPhysicsFlags(Thing thing, int physflags)\n</code></pre>"},{"location":"cog/cog_thing/#clearphysicsflags","title":"ClearPhysicsFlags","text":"<pre><code>ClearPhysicsFlags(Thing thing, int physflags)\n</code></pre>"},{"location":"cog/cog_thing/#parsearg","title":"ParseArg","text":"<pre><code>ParseArg(Thing thing, string args)\n</code></pre>"},{"location":"cog/cog_thing/#getthingrotvel","title":"GetThingRotVel","text":"<pre><code>GetThingRotVel(Thing thing) -&gt; Vector\n</code></pre>"},{"location":"cog/cog_thing/#setthingrotvel","title":"SetThingRotVel","text":"<pre><code>SetThingRotVel(Thing thing, Vector vel)\n</code></pre>"},{"location":"cog/cog_thing/#getthingrotthrust","title":"GetThingRotThrust","text":"<pre><code>GetThingRotThrust(Thing thing) -&gt; Vector\n</code></pre>"},{"location":"cog/cog_thing/#setthingrotthrust","title":"SetThingRotThrust","text":"<pre><code>SetThingRotThrust(Thing thing, Vector vec)\n</code></pre>"},{"location":"cog/cog_thing/#setthinglook","title":"SetThingLook","text":"<pre><code>SetThingLook(Thing thing, Vector look)\n</code></pre>"},{"location":"cog/cog_thing/#setthingheadlookpos","title":"SetThingHeadLookPos","text":"<pre><code>SetThingHeadLookPos(Thing thing, Vector look)\n</code></pre>"},{"location":"cog/cog_thing/#setthingheadlookthing","title":"SetThingHeadLookThing","text":"<pre><code>SetThingHeadLookThing(Thing thing, Thing lookThing)\n</code></pre>"},{"location":"cog/cog_thing/#isthingcrouching","title":"IsThingCrouching","text":"<pre><code>IsThingCrouching(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#iscrouching","title":"IsCrouching","text":"<pre><code>IsCrouching(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#getthingclasscog","title":"GetThingClassCog","text":"<pre><code>GetThingClassCog(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#setthingclasscog","title":"SetThingClassCog","text":"<pre><code>SetThingClassCog(Thing thing, cog thingCog)\n</code></pre>"},{"location":"cog/cog_thing/#getthingcapturecog","title":"GetThingCaptureCog","text":"<pre><code>GetThingCaptureCog(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#setthingcapturecog","title":"SetThingCaptureCog","text":"<pre><code>SetThingCaptureCog(Thing thing, cog captureCog)\n</code></pre>"},{"location":"cog/cog_thing/#getthingrespawn","title":"GetThingRespawn","text":"<pre><code>GetThingRespawn(Thing thing) -&gt; float\n</code></pre>"},{"location":"cog/cog_thing/#getthingsignature","title":"GetThingSignature","text":"<pre><code>GetThingSignature(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#setthingattachflags","title":"SetThingAttachFlags","text":"<pre><code>SetThingAttachFlags(Thing thing, int attflags)\n</code></pre>"},{"location":"cog/cog_thing/#clearthingattachflags","title":"ClearThingAttachFlags","text":"<pre><code>ClearThingAttachFlags(Thing thing, int attflags)\n</code></pre>"},{"location":"cog/cog_thing/#getparticlesize","title":"GetParticleSize","text":"<pre><code>GetParticleSize(Thing thing) -&gt; float\n</code></pre>"},{"location":"cog/cog_thing/#setparticlesize","title":"SetParticleSize","text":"<pre><code>SetParticleSize(Thing thing, float size)\n</code></pre>"},{"location":"cog/cog_thing/#getparticlegrowthspeed","title":"GetParticleGrowthSpeed","text":"<pre><code>GetParticleGrowthSpeed(Thing thing) -&gt; float\n</code></pre>"},{"location":"cog/cog_thing/#setparticlegrowthspeed","title":"SetParticleGrowthSpeed","text":"<pre><code>SetParticleGrowthSpeed(Thing thing, float speed)\n</code></pre>"},{"location":"cog/cog_thing/#getparticletimeoutrate","title":"GetParticleTimeoutRate","text":"<pre><code>GetParticleTimeoutRate(Thing thing) -&gt; float\n</code></pre>"},{"location":"cog/cog_thing/#setparticletimeoutrate","title":"SetParticleTimeoutRate","text":"<pre><code>SetParticleTimeoutRate(Thing thing, float timeoutRate)\n</code></pre>"},{"location":"cog/cog_thing/#gettypeflags","title":"GetTypeFlags","text":"<pre><code>GetTypeFlags(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#settypeflags","title":"SetTypeFlags","text":"<pre><code>SetTypeFlags(Thing thing, int flags)\n</code></pre>"},{"location":"cog/cog_thing/#cleartypeflags","title":"ClearTypeFlags","text":"<pre><code>ClearTypeFlags(Thing thing, int flags)\n</code></pre>"},{"location":"cog/cog_thing/#getactorflags","title":"GetActorFlags","text":"<pre><code>GetActorFlags(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#setactorflags","title":"SetActorFlags","text":"<pre><code>SetActorFlags(Thing thing, int flags)\n</code></pre>"},{"location":"cog/cog_thing/#clearactorflags","title":"ClearActorFlags","text":"<pre><code>ClearActorFlags(Thing thing, int flags)\n</code></pre>"},{"location":"cog/cog_thing/#getweaponflags","title":"GetWeaponFlags","text":"<pre><code>GetWeaponFlags(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#setweaponflags","title":"SetWeaponFlags","text":"<pre><code>SetWeaponFlags(Thing thing, int flags)\n</code></pre>"},{"location":"cog/cog_thing/#clearweaponflags","title":"ClearWeaponFlags","text":"<pre><code>ClearWeaponFlags(Thing thing, int flags)\n</code></pre>"},{"location":"cog/cog_thing/#getexplosionflags","title":"GetExplosionFlags","text":"<pre><code>GetExplosionFlags(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#setexplosionflags","title":"SetExplosionFlags","text":"<pre><code>SetExplosionFlags(Thing thing, int flags)\n</code></pre>"},{"location":"cog/cog_thing/#clearexplosionflags","title":"ClearExplosionFlags","text":"<pre><code>ClearExplosionFlags(Thing thing, int flags)\n</code></pre>"},{"location":"cog/cog_thing/#getitemflags","title":"GetItemFlags","text":"<pre><code>GetItemFlags(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#setitemflags","title":"SetItemFlags","text":"<pre><code>SetItemFlags(Thing thing, int flags)\n</code></pre>"},{"location":"cog/cog_thing/#clearitemflags","title":"ClearItemFlags","text":"<pre><code>ClearItemFlags(Thing thing, int flags)\n</code></pre>"},{"location":"cog/cog_thing/#getparticleflags","title":"GetParticleFlags","text":"<pre><code>GetParticleFlags(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#setparticleflags","title":"SetParticleFlags","text":"<pre><code>SetParticleFlags(Thing thing, int flags)\n</code></pre>"},{"location":"cog/cog_thing/#clearparticleflags","title":"ClearParticleFlags","text":"<pre><code>ClearParticleFlags(Thing thing, int flags)\n</code></pre>"},{"location":"cog/cog_thing/#takeitem","title":"TakeItem","text":"<pre><code>TakeItem(Thing item, Thing thing)\n</code></pre>"},{"location":"cog/cog_thing/#haslos","title":"HasLOS","text":"<pre><code>HasLOS(Thing viewer, Thing target) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#getthingfireoffset","title":"GetThingFireOffset","text":"<pre><code>GetThingFireOffset(Thing thing) -&gt; Vector\n</code></pre>"},{"location":"cog/cog_thing/#setthingfireoffset","title":"SetThingFireOffset","text":"<pre><code>SetThingFireOffset(Thing thing, Vector offset)\n</code></pre>"},{"location":"cog/cog_thing/#getthinguserdata","title":"GetThingUserData","text":"<pre><code>GetThingUserData(Thing thing) -&gt; float\n</code></pre>"},{"location":"cog/cog_thing/#setthinguserdata","title":"SetThingUserData","text":"<pre><code>SetThingUserData(Thing thing, float userval)\n</code></pre>"},{"location":"cog/cog_thing/#getthingcollidesize","title":"GetThingCollideSize","text":"<pre><code>GetThingCollideSize(Thing thing) -&gt; float\n</code></pre>"},{"location":"cog/cog_thing/#setthingcollidesize","title":"SetThingCollideSize","text":"<pre><code>SetThingCollideSize(Thing thing, float size)\n</code></pre>"},{"location":"cog/cog_thing/#getthingmovesize","title":"GetThingMoveSize","text":"<pre><code>GetThingMoveSize(Thing thing) -&gt; float\n</code></pre>"},{"location":"cog/cog_thing/#setthingmovesize","title":"SetThingMoveSize","text":"<pre><code>SetThingMoveSize(Thing thing, float movesize)\n</code></pre>"},{"location":"cog/cog_thing/#getthingmass","title":"GetThingMass","text":"<pre><code>GetThingMass(Thing thing) -&gt; float\n</code></pre>"},{"location":"cog/cog_thing/#setthingmass","title":"SetThingMass","text":"<pre><code>SetThingMass(Thing thing, float mass)\n</code></pre>"},{"location":"cog/cog_thing/#syncthingpos","title":"SyncThingPos","text":"<pre><code>SyncThingPos(Thing thing)\n</code></pre>"},{"location":"cog/cog_thing/#syncthingattachment","title":"SyncThingAttachment","text":"<pre><code>SyncThingAttachment(Thing thing)\n</code></pre>"},{"location":"cog/cog_thing/#syncthingstate","title":"SyncThingState","text":"<pre><code>SyncThingState(Thing thing)\n</code></pre>"},{"location":"cog/cog_thing/#attachthingtothingex","title":"AttachThingToThingEx","text":"<pre><code>AttachThingToThingEx(Thing thing, Thing attachThing, int attflags)\n</code></pre>"},{"location":"cog/cog_thing/#getthingattachedthing","title":"GetThingAttachedThing","text":"<pre><code>GetThingAttachedThing(Thing thing, int attype) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#getmeshbyname","title":"GetMeshByName","text":"<pre><code>GetMeshByName(Thing thing, string meshName) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#getnodebyname","title":"GetNodeByName","text":"<pre><code>GetNodeByName(Thing thing, string nodeName) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#attachthingtothingmesh","title":"AttachThingToThingMesh","text":"<pre><code>AttachThingToThingMesh(Thing attachThing, Template template, int meshNum) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#detachthingmesh","title":"DetachThingMesh","text":"<pre><code>DetachThingMesh(Thing thing)\n</code></pre>"},{"location":"cog/cog_thing/#setthingmesh","title":"SetThingMesh","text":"<pre><code>SetThingMesh(Thing thing, int meshNum, Model model, int meshNumSrc) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#restorethingmesh","title":"RestoreThingMesh","text":"<pre><code>RestoreThingMesh(Thing thing, int refnum)\n</code></pre>"},{"location":"cog/cog_thing/#getthingalpha","title":"GetThingAlpha","text":"<pre><code>GetThingAlpha(Thing thing) -&gt; float\n</code></pre>"},{"location":"cog/cog_thing/#setthingalpha","title":"SetThingAlpha","text":"<pre><code>SetThingAlpha(Thing thing, float alpha) -&gt; float\n</code></pre>"},{"location":"cog/cog_thing/#getcamerafov","title":"GetCameraFOV","text":"<pre><code>GetCameraFOV() -&gt; float\n</code></pre>"},{"location":"cog/cog_thing/#setcamerafov","title":"SetCameraFOV","text":"<pre><code>SetCameraFOV(float fov, int bInterp, float timeDelta)\n</code></pre>"},{"location":"cog/cog_thing/#resetcamerafov","title":"ResetCameraFOV","text":"<pre><code>ResetCameraFOV(int bInterp, float time)\n</code></pre>"},{"location":"cog/cog_thing/#setcameralookinterp","title":"SetCameraLookInterp","text":"<pre><code>SetCameraLookInterp(int camNum, int bEnable)\n</code></pre>"},{"location":"cog/cog_thing/#setcameraposinterp","title":"SetCameraPosInterp","text":"<pre><code>SetCameraPosInterp(int camNum, int bDollyMode)\n</code></pre>"},{"location":"cog/cog_thing/#setcamerainterpspeed","title":"SetCameraInterpSpeed","text":"<pre><code>SetCameraInterpSpeed(int camNum, float speed)\n</code></pre>"},{"location":"cog/cog_thing/#setcameraposition","title":"SetCameraPosition","text":"<pre><code>SetCameraPosition(int camNum, Vector vec)\n</code></pre>"},{"location":"cog/cog_thing/#animatespritesize","title":"AnimateSpriteSize","text":"<pre><code>AnimateSpriteSize(Thing sprite, Vector vecStart, Vector vecEnd, float deltaTime) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#getcameraposition","title":"GetCameraPosition","text":"<pre><code>GetCameraPosition(int camNum) -&gt; Vector\n</code></pre>"},{"location":"cog/cog_thing/#setcamerafadething","title":"SetCameraFadeThing","text":"<p><pre><code>SetCameraFadeThing(int camNum, Thing fadeThing, Thing camPosThing, int bWhiteFade)\n</code></pre> Sets fade thing for camera at <code>camNum</code>. Parameters:   - <code>camNum</code> - The camera number for which to set the fade thing for.   - <code>fadeThing</code> - The fade plate thing   - <code>camPosThing</code> - The thing to be used as camera postition thing (primary thing).       The thing position and orientation will be changed to the camera pose. Can be daynamic thinf created in script.   - <code>bWhiteFade</code> - If true the white side of the fade plate will face the camera.</p>"},{"location":"cog/cog_thing/#setextcamoffset","title":"SetExtCamOffset","text":"<pre><code>SetExtCamOffset(Vector vec)\n</code></pre>"},{"location":"cog/cog_thing/#setextcamoffsettothing","title":"SetExtCamOffsetToThing","text":"<pre><code>SetExtCamOffsetToThing(Thing thing)\n</code></pre>"},{"location":"cog/cog_thing/#setextcamlookoffsettothing","title":"SetExtCamLookOffsetToThing","text":"<pre><code>SetExtCamLookOffsetToThing(Thing thing)\n</code></pre>"},{"location":"cog/cog_thing/#setextcamlookoffset","title":"SetExtCamLookOffset","text":"<pre><code>SetExtCamLookOffset(Vector vec)\n</code></pre>"},{"location":"cog/cog_thing/#restoreextcam","title":"RestoreExtCam","text":"<pre><code>RestoreExtCam()\n</code></pre>"},{"location":"cog/cog_thing/#playforcemovemode","title":"PlayForceMoveMode","text":"<pre><code>PlayForceMoveMode(Thing thing, int submode) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#isthingautoaiming","title":"IsThingAutoAiming","text":"<p><pre><code>IsThingAutoAiming()\n</code></pre> Not used.</p>"},{"location":"cog/cog_thing/#getmovestatus","title":"GetMoveStatus","text":"<pre><code>GetMoveStatus(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#createlaser","title":"CreateLaser","text":"<pre><code>CreateLaser(Thing srcThing, Vector offset, Vector endPos, float baseRadius, float tipRadius, float duration) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#createlightning","title":"CreateLightning","text":"<pre><code>CreateLightning(Thing sourceThing, Vector offset, Vector endPos, float baseRadius, float tipRadius, float duration) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#makefairydust","title":"MakeFairyDust","text":"<pre><code>MakeFairyDust(Thing thing, Vector pos)\n</code></pre>"},{"location":"cog/cog_thing/#makefairydustdeluxe","title":"MakeFairyDustDeluxe","text":"<pre><code>MakeFairyDustDeluxe(Thing thing, Vector pos)\n</code></pre>"},{"location":"cog/cog_thing/#setpuppetmodefps","title":"SetPuppetModeFPS","text":"<p><pre><code>SetPuppetModeFPS(Thing thing, int mode, int submode, float fps) -&gt; float\n</code></pre> Sets a new FPS for the puppet mode and puppet submode animation track of the <code>thing</code> object.</p> <p>Parameters:  * <code>thing</code> - The game object to set the keyframe FPS.  * <code>mode</code> - The <code>puppet mode</code> number.  * <code>submode</code> - The puppet submode number.  * <code>fps</code> - The new keyframe FPS</p> <p>Return   Returns previous track FPS.</p>"},{"location":"cog/cog_thing/#setmovemode","title":"SetMoveMode","text":"<p><pre><code>SetMoveMode(Thing thing, int newMode) -&gt; int\n</code></pre> Sets <code>puppet move mode</code> for <code>thing</code> object. The object needs to have both a model and puppet object assigned.</p> <p>Parameters:  * <code>thing</code> - The game object to set new move mode.  * <code>moveMode</code> - The <code>puppet move mode</code> number (0-2).</p> <p>Return   On success 0 is returned, otherwise -1.</p>"},{"location":"cog/cog_thing/#checkfloordistance","title":"CheckFloorDistance","text":"<pre><code>CheckFloorDistance(Thing thing) -&gt; float\n</code></pre>"},{"location":"cog/cog_thing/#checkpathtopoint","title":"CheckPathToPoint","text":"<pre><code>CheckPathToPoint(Thing viewer, Vector vecTarget, int bDetectThings, int bSkipFloor) -&gt; float\n</code></pre>"},{"location":"cog/cog_thing/#setthingstatechange","title":"SetThingStateChange","text":"<pre><code>SetThingStateChange(Thing thing, int state, int armModeState)\n</code></pre>"},{"location":"cog/cog_thing/#createpolylinething","title":"CreatePolylineThing","text":"<pre><code>CreatePolylineThing(Thing srcThing, Optional[Thing] destThing, Vector endPos, Material material, float baseRadius, float tipRadius, float duration) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#startquetzanim","title":"StartQuetzAnim","text":"<pre><code>StartQuetzAnim(Thing thing, int mode) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#boardvehicle","title":"BoardVehicle","text":"<pre><code>BoardVehicle(Thing thing) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#fadeintrack","title":"FadeInTrack","text":"<p><pre><code>FadeInTrack(Thing thing, int trackNum, float speed) -&gt; int\n</code></pre> Causes the track animation to fade-in for the thing object. The object needs to have both a model and puppet object assigned.</p> <p>Parameters:  * <code>thing</code> - The game object to fade-in puppet <code>track</code> animation.  * <code>trackNum</code> - Puppet track number to play fade-in mode.  * <code>fadeTime</code> - Track fade-in speed. Should be greater than 0, else 1 is set.</p> <p>Return   On success 1 is returned, otherwise -1.</p>"},{"location":"cog/cog_thing/#isghostvisible","title":"IsGhostVisible","text":"<pre><code>IsGhostVisible(Thing thing, Thing ghostThing, float angle) -&gt; int\n</code></pre>"},{"location":"cog/cog_thing/#makecamera2likecamera1","title":"MakeCamera2LikeCamera1","text":"<p><pre><code>MakeCamera2LikeCamera1(Thing cam1Pos, Thing cam1Look) -&gt; int\n</code></pre> Assigns the position and focus of camera 1 aka external camera (3rd person) to the <code>cam1Pos</code> and <code>can1Look</code> objects.</p> <p>Parameters:  * <code>cam1Pos</code> - The game object to which camera 1's position is assigned. Must be a valid, non-free object.  * <code>cam1Look</code> - The game object to which camera 1's focus is assigned. Must be a valid, non-free object.</p> <p>Return   On success 1 is returned, otherwise -1.</p>"},{"location":"cog/cog_voice/","title":"Voice COG Functions","text":""},{"location":"cog/cog_voice/#function-list","title":"Function List","text":"<ul> <li>PlayVoice</li> <li>SetThingVoiceHeads</li> <li>SetThingVoiceColor</li> <li>SetVoiceParams</li> <li>SetVoiceHeadHeight</li> </ul>"},{"location":"cog/cog_voice/#playvoice","title":"PlayVoice","text":"<pre><code>PlayVoice(Thing thing, Sound snd, float volume, int bWait) -&gt; int\n</code></pre>"},{"location":"cog/cog_voice/#setthingvoiceheads","title":"SetThingVoiceHeads","text":"<pre><code>SetThingVoiceHeads(Thing thing, string meshName, string value)\n</code></pre>"},{"location":"cog/cog_voice/#setthingvoicecolor","title":"SetThingVoiceColor","text":"<pre><code>SetThingVoiceColor(Thing thing, Vector value)\n</code></pre>"},{"location":"cog/cog_voice/#setvoiceparams","title":"SetVoiceParams","text":"<pre><code>SetVoiceParams(float sedHeadSwapInterval, int unknown)\n</code></pre>"},{"location":"cog/cog_voice/#setvoiceheadheight","title":"SetVoiceHeadHeight","text":"<pre><code>SetVoiceHeadHeight(int idx, int height)\n</code></pre>"}]}